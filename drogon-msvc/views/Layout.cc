//this file is generated by program(drogon_ctl) automatically,don't modify it!
#include "Layout.h"
#include <drogon/utils/OStringStream.h>
#include <string>
#include <map>
#include <vector>
#include <set>
#include <iostream>
#include <unordered_map>
#include <unordered_set>
#include <algorithm>
#include <list>
#include <deque>
#include <queue>
using namespace drogon;
std::string Layout::genText(const DrTemplateData& Layout_view_data)
{
	drogon::OStringStream Layout_tmp_stream;
	std::string layoutName{""};
	Layout_tmp_stream << "<!doctype html>\n";
	Layout_tmp_stream << "<html lang=\"zh-CN\" data-bs-theme=\"auto\">\n";
	Layout_tmp_stream << "<head>\n";
	Layout_tmp_stream << "    <meta charset=\"UTF-8\">\n";
	Layout_tmp_stream << "    <title>Sidebars Â· Bootstrap v5.3</title>\n";
Layout_tmp_stream<<"\n";
	Layout_tmp_stream << "    ";
{
    auto templ=DrTemplateBase::newTemplate("Base.csp");
    if(templ){
      Layout_tmp_stream<< templ->genText(Layout_view_data);
    }
}
Layout_tmp_stream<<"\n";
Layout_tmp_stream<<"\n";
	Layout_tmp_stream << "    <style>\n";
	Layout_tmp_stream << "        @media (min-width: 768px) {\n";
	Layout_tmp_stream << "            .bd-placeholder-img-lg {\n";
	Layout_tmp_stream << "                font-size: 3.5rem;\n";
	Layout_tmp_stream << "            }\n";
	Layout_tmp_stream << "        }\n";
Layout_tmp_stream<<"\n";
	Layout_tmp_stream << "        .b-example-divider {\n";
	Layout_tmp_stream << "            width: 100%;\n";
	Layout_tmp_stream << "            height: 3rem;\n";
	Layout_tmp_stream << "            background-color: rgba(0, 0, 0, .1);\n";
	Layout_tmp_stream << "            border: solid rgba(0, 0, 0, .15);\n";
	Layout_tmp_stream << "            border-width: 1px 0;\n";
	Layout_tmp_stream << "            box-shadow: inset 0 .5em 1.5em rgba(0, 0, 0, .1), inset 0 .125em .5em rgba(0, 0, 0, .15);\n";
	Layout_tmp_stream << "        }\n";
Layout_tmp_stream<<"\n";
	Layout_tmp_stream << "        .b-example-vr {\n";
	Layout_tmp_stream << "            flex-shrink: 0;\n";
	Layout_tmp_stream << "            width: 1.5rem;\n";
	Layout_tmp_stream << "            height: 100vh;\n";
	Layout_tmp_stream << "        }\n";
Layout_tmp_stream<<"\n";
	Layout_tmp_stream << "        .bi {\n";
	Layout_tmp_stream << "            vertical-align: -.125em;\n";
	Layout_tmp_stream << "            fill: currentColor;\n";
	Layout_tmp_stream << "        }\n";
Layout_tmp_stream<<"\n";
	Layout_tmp_stream << "        .nav-scroller {\n";
	Layout_tmp_stream << "            position: relative;\n";
	Layout_tmp_stream << "            z-index: 2;\n";
	Layout_tmp_stream << "            height: 2.75rem;\n";
	Layout_tmp_stream << "            overflow-y: hidden;\n";
	Layout_tmp_stream << "        }\n";
Layout_tmp_stream<<"\n";
	Layout_tmp_stream << "        .nav-scroller .nav {\n";
	Layout_tmp_stream << "            display: flex;\n";
	Layout_tmp_stream << "            flex-wrap: nowrap;\n";
	Layout_tmp_stream << "            padding-bottom: 1rem;\n";
	Layout_tmp_stream << "            margin-top: -1px;\n";
	Layout_tmp_stream << "            overflow-x: auto;\n";
	Layout_tmp_stream << "            text-align: center;\n";
	Layout_tmp_stream << "            white-space: nowrap;\n";
	Layout_tmp_stream << "            -webkit-overflow-scrolling: touch;\n";
	Layout_tmp_stream << "        }\n";
Layout_tmp_stream<<"\n";
	Layout_tmp_stream << "        .btn-bd-primary {\n";
	Layout_tmp_stream << "            --bd-violet-bg: #712cf9;\n";
	Layout_tmp_stream << "            --bd-violet-rgb: 112.520718, 44.062154, 249.437846;\n";
Layout_tmp_stream<<"\n";
	Layout_tmp_stream << "            --bs-btn-font-weight: 600;\n";
	Layout_tmp_stream << "            --bs-btn-color: var(--bs-white);\n";
	Layout_tmp_stream << "            --bs-btn-bg: var(--bd-violet-bg);\n";
	Layout_tmp_stream << "            --bs-btn-border-color: var(--bd-violet-bg);\n";
	Layout_tmp_stream << "            --bs-btn-hover-color: var(--bs-white);\n";
	Layout_tmp_stream << "            --bs-btn-hover-bg: #6528e0;\n";
	Layout_tmp_stream << "            --bs-btn-hover-border-color: #6528e0;\n";
	Layout_tmp_stream << "            --bs-btn-focus-shadow-rgb: var(--bd-violet-rgb);\n";
	Layout_tmp_stream << "            --bs-btn-active-color: var(--bs-btn-hover-color);\n";
	Layout_tmp_stream << "            --bs-btn-active-bg: #5a23c8;\n";
	Layout_tmp_stream << "            --bs-btn-active-border-color: #5a23c8;\n";
	Layout_tmp_stream << "        }\n";
Layout_tmp_stream<<"\n";
	Layout_tmp_stream << "        .bd-mode-toggle {\n";
	Layout_tmp_stream << "            z-index: 1500;\n";
	Layout_tmp_stream << "        }\n";
	Layout_tmp_stream << "    </style>\n";
	Layout_tmp_stream << "</head>\n";
	Layout_tmp_stream << "<body>\n";
Layout_tmp_stream<<"\n";
	Layout_tmp_stream << "<main class=\"d-flex flex-nowrap\">\n";
	Layout_tmp_stream << "    ";
{
    auto templ=DrTemplateBase::newTemplate("Sidebar.csp");
    if(templ){
      Layout_tmp_stream<< templ->genText(Layout_view_data);
    }
}
Layout_tmp_stream<<"\n";
	Layout_tmp_stream << "    <main class=\"container\">\n";
	Layout_tmp_stream << "    <div class=\"row\">\n";
	Layout_tmp_stream << "    <div class=\"col-12\">\n";
	Layout_tmp_stream << "    ";
{
    auto templ=DrTemplateBase::newTemplate("Header.csp");
    if(templ){
      Layout_tmp_stream<< templ->genText(Layout_view_data);
    }
}
Layout_tmp_stream<<"\n";
	Layout_tmp_stream << "    </div>\n";
	Layout_tmp_stream << "    <div class=\"col-12\">\n";
	Layout_tmp_stream << "    ";
{
    auto & val=Layout_view_data[""];
    if(val.type()==typeid(const char *)){
        Layout_tmp_stream<<*any_cast<const char *>(&val);
    }else if(val.type()==typeid(std::string)||val.type()==typeid(const std::string)){
        Layout_tmp_stream<<*any_cast<const std::string>(&val);
    }
}
Layout_tmp_stream<<"\n";
	Layout_tmp_stream << "    </div>\n";
	Layout_tmp_stream << "    </div>\n";
	Layout_tmp_stream << "    </main>\n";
Layout_tmp_stream<<"\n";
Layout_tmp_stream<<"\n";
	Layout_tmp_stream << "</main>\n";
Layout_tmp_stream<<"\n";
	Layout_tmp_stream << "</script>\n";
Layout_tmp_stream<<"\n";
	Layout_tmp_stream << "</body>\n";
	Layout_tmp_stream << "</html>\n";
if(layoutName.empty())
{
std::string ret{std::move(Layout_tmp_stream.str())};
return ret;
}else
{
auto templ = DrTemplateBase::newTemplate(layoutName);
if(!templ) return "";
HttpViewData data = Layout_view_data;
auto str = std::move(Layout_tmp_stream.str());
if(!str.empty() && str[str.length()-1] == '\n') str.resize(str.length()-1);
data[""] = std::move(str);
return templ->genText(data);
}
}
