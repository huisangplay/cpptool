/**
 *
 *  Customer.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Customer.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::sqlite3;

const std::string Customer::Cols::_CustomerId = "CustomerId";
const std::string Customer::Cols::_FirstName = "FirstName";
const std::string Customer::Cols::_LastName = "LastName";
const std::string Customer::Cols::_Company = "Company";
const std::string Customer::Cols::_Address = "Address";
const std::string Customer::Cols::_City = "City";
const std::string Customer::Cols::_State = "State";
const std::string Customer::Cols::_Country = "Country";
const std::string Customer::Cols::_PostalCode = "PostalCode";
const std::string Customer::Cols::_Phone = "Phone";
const std::string Customer::Cols::_Fax = "Fax";
const std::string Customer::Cols::_Email = "Email";
const std::string Customer::Cols::_SupportRepId = "SupportRepId";
const std::string Customer::primaryKeyName = "CustomerId";
const bool Customer::hasPrimaryKey = true;
const std::string Customer::tableName = "customer";

const std::vector<typename Customer::MetaData> Customer::metaData_={
{"CustomerId","uint64_t","integer",8,1,1,1},
{"FirstName","std::string","nvarchar(40)",0,0,0,1},
{"LastName","std::string","nvarchar(20)",0,0,0,1},
{"Company","std::string","nvarchar(80)",0,0,0,0},
{"Address","std::string","nvarchar(70)",0,0,0,0},
{"City","std::string","nvarchar(40)",0,0,0,0},
{"State","std::string","nvarchar(40)",0,0,0,0},
{"Country","std::string","nvarchar(40)",0,0,0,0},
{"PostalCode","std::string","nvarchar(10)",0,0,0,0},
{"Phone","std::string","nvarchar(24)",0,0,0,0},
{"Fax","std::string","nvarchar(24)",0,0,0,0},
{"Email","std::string","nvarchar(60)",0,0,0,1},
{"SupportRepId","uint64_t","integer",8,0,0,0}
};
const std::string &Customer::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Customer::Customer(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["CustomerId"].isNull())
        {
            customerid_=std::make_shared<uint64_t>(r["CustomerId"].as<uint64_t>());
        }
        if(!r["FirstName"].isNull())
        {
            firstname_=std::make_shared<std::string>(r["FirstName"].as<std::string>());
        }
        if(!r["LastName"].isNull())
        {
            lastname_=std::make_shared<std::string>(r["LastName"].as<std::string>());
        }
        if(!r["Company"].isNull())
        {
            company_=std::make_shared<std::string>(r["Company"].as<std::string>());
        }
        if(!r["Address"].isNull())
        {
            address_=std::make_shared<std::string>(r["Address"].as<std::string>());
        }
        if(!r["City"].isNull())
        {
            city_=std::make_shared<std::string>(r["City"].as<std::string>());
        }
        if(!r["State"].isNull())
        {
            state_=std::make_shared<std::string>(r["State"].as<std::string>());
        }
        if(!r["Country"].isNull())
        {
            country_=std::make_shared<std::string>(r["Country"].as<std::string>());
        }
        if(!r["PostalCode"].isNull())
        {
            postalcode_=std::make_shared<std::string>(r["PostalCode"].as<std::string>());
        }
        if(!r["Phone"].isNull())
        {
            phone_=std::make_shared<std::string>(r["Phone"].as<std::string>());
        }
        if(!r["Fax"].isNull())
        {
            fax_=std::make_shared<std::string>(r["Fax"].as<std::string>());
        }
        if(!r["Email"].isNull())
        {
            email_=std::make_shared<std::string>(r["Email"].as<std::string>());
        }
        if(!r["SupportRepId"].isNull())
        {
            supportrepid_=std::make_shared<uint64_t>(r["SupportRepId"].as<uint64_t>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 13 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            customerid_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            firstname_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            lastname_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            company_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            address_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            city_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            state_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            country_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 8;
        if(!r[index].isNull())
        {
            postalcode_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 9;
        if(!r[index].isNull())
        {
            phone_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 10;
        if(!r[index].isNull())
        {
            fax_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 11;
        if(!r[index].isNull())
        {
            email_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 12;
        if(!r[index].isNull())
        {
            supportrepid_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
    }

}

Customer::Customer(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 13)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            customerid_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            firstname_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            lastname_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            company_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            address_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            city_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            state_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            country_=std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            postalcode_=std::make_shared<std::string>(pJson[pMasqueradingVector[8]].asString());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            phone_=std::make_shared<std::string>(pJson[pMasqueradingVector[9]].asString());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            fax_=std::make_shared<std::string>(pJson[pMasqueradingVector[10]].asString());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            email_=std::make_shared<std::string>(pJson[pMasqueradingVector[11]].asString());
        }
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        dirtyFlag_[12] = true;
        if(!pJson[pMasqueradingVector[12]].isNull())
        {
            supportrepid_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[12]].asUInt64());
        }
    }
}

Customer::Customer(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("CustomerId"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["CustomerId"].isNull())
        {
            customerid_=std::make_shared<uint64_t>((uint64_t)pJson["CustomerId"].asUInt64());
        }
    }
    if(pJson.isMember("FirstName"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["FirstName"].isNull())
        {
            firstname_=std::make_shared<std::string>(pJson["FirstName"].asString());
        }
    }
    if(pJson.isMember("LastName"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["LastName"].isNull())
        {
            lastname_=std::make_shared<std::string>(pJson["LastName"].asString());
        }
    }
    if(pJson.isMember("Company"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["Company"].isNull())
        {
            company_=std::make_shared<std::string>(pJson["Company"].asString());
        }
    }
    if(pJson.isMember("Address"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["Address"].isNull())
        {
            address_=std::make_shared<std::string>(pJson["Address"].asString());
        }
    }
    if(pJson.isMember("City"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["City"].isNull())
        {
            city_=std::make_shared<std::string>(pJson["City"].asString());
        }
    }
    if(pJson.isMember("State"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["State"].isNull())
        {
            state_=std::make_shared<std::string>(pJson["State"].asString());
        }
    }
    if(pJson.isMember("Country"))
    {
        dirtyFlag_[7]=true;
        if(!pJson["Country"].isNull())
        {
            country_=std::make_shared<std::string>(pJson["Country"].asString());
        }
    }
    if(pJson.isMember("PostalCode"))
    {
        dirtyFlag_[8]=true;
        if(!pJson["PostalCode"].isNull())
        {
            postalcode_=std::make_shared<std::string>(pJson["PostalCode"].asString());
        }
    }
    if(pJson.isMember("Phone"))
    {
        dirtyFlag_[9]=true;
        if(!pJson["Phone"].isNull())
        {
            phone_=std::make_shared<std::string>(pJson["Phone"].asString());
        }
    }
    if(pJson.isMember("Fax"))
    {
        dirtyFlag_[10]=true;
        if(!pJson["Fax"].isNull())
        {
            fax_=std::make_shared<std::string>(pJson["Fax"].asString());
        }
    }
    if(pJson.isMember("Email"))
    {
        dirtyFlag_[11]=true;
        if(!pJson["Email"].isNull())
        {
            email_=std::make_shared<std::string>(pJson["Email"].asString());
        }
    }
    if(pJson.isMember("SupportRepId"))
    {
        dirtyFlag_[12]=true;
        if(!pJson["SupportRepId"].isNull())
        {
            supportrepid_=std::make_shared<uint64_t>((uint64_t)pJson["SupportRepId"].asUInt64());
        }
    }
}

void Customer::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 13)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            customerid_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            firstname_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            lastname_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            company_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            address_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            city_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            state_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            country_=std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            postalcode_=std::make_shared<std::string>(pJson[pMasqueradingVector[8]].asString());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            phone_=std::make_shared<std::string>(pJson[pMasqueradingVector[9]].asString());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            fax_=std::make_shared<std::string>(pJson[pMasqueradingVector[10]].asString());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            email_=std::make_shared<std::string>(pJson[pMasqueradingVector[11]].asString());
        }
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        dirtyFlag_[12] = true;
        if(!pJson[pMasqueradingVector[12]].isNull())
        {
            supportrepid_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[12]].asUInt64());
        }
    }
}

void Customer::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("CustomerId"))
    {
        if(!pJson["CustomerId"].isNull())
        {
            customerid_=std::make_shared<uint64_t>((uint64_t)pJson["CustomerId"].asUInt64());
        }
    }
    if(pJson.isMember("FirstName"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["FirstName"].isNull())
        {
            firstname_=std::make_shared<std::string>(pJson["FirstName"].asString());
        }
    }
    if(pJson.isMember("LastName"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["LastName"].isNull())
        {
            lastname_=std::make_shared<std::string>(pJson["LastName"].asString());
        }
    }
    if(pJson.isMember("Company"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["Company"].isNull())
        {
            company_=std::make_shared<std::string>(pJson["Company"].asString());
        }
    }
    if(pJson.isMember("Address"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["Address"].isNull())
        {
            address_=std::make_shared<std::string>(pJson["Address"].asString());
        }
    }
    if(pJson.isMember("City"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["City"].isNull())
        {
            city_=std::make_shared<std::string>(pJson["City"].asString());
        }
    }
    if(pJson.isMember("State"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["State"].isNull())
        {
            state_=std::make_shared<std::string>(pJson["State"].asString());
        }
    }
    if(pJson.isMember("Country"))
    {
        dirtyFlag_[7] = true;
        if(!pJson["Country"].isNull())
        {
            country_=std::make_shared<std::string>(pJson["Country"].asString());
        }
    }
    if(pJson.isMember("PostalCode"))
    {
        dirtyFlag_[8] = true;
        if(!pJson["PostalCode"].isNull())
        {
            postalcode_=std::make_shared<std::string>(pJson["PostalCode"].asString());
        }
    }
    if(pJson.isMember("Phone"))
    {
        dirtyFlag_[9] = true;
        if(!pJson["Phone"].isNull())
        {
            phone_=std::make_shared<std::string>(pJson["Phone"].asString());
        }
    }
    if(pJson.isMember("Fax"))
    {
        dirtyFlag_[10] = true;
        if(!pJson["Fax"].isNull())
        {
            fax_=std::make_shared<std::string>(pJson["Fax"].asString());
        }
    }
    if(pJson.isMember("Email"))
    {
        dirtyFlag_[11] = true;
        if(!pJson["Email"].isNull())
        {
            email_=std::make_shared<std::string>(pJson["Email"].asString());
        }
    }
    if(pJson.isMember("SupportRepId"))
    {
        dirtyFlag_[12] = true;
        if(!pJson["SupportRepId"].isNull())
        {
            supportrepid_=std::make_shared<uint64_t>((uint64_t)pJson["SupportRepId"].asUInt64());
        }
    }
}

const uint64_t &Customer::getValueOfCustomerid() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(customerid_)
        return *customerid_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &Customer::getCustomerid() const noexcept
{
    return customerid_;
}
void Customer::setCustomerid(const uint64_t &pCustomerid) noexcept
{
    customerid_ = std::make_shared<uint64_t>(pCustomerid);
    dirtyFlag_[0] = true;
}
const typename Customer::PrimaryKeyType & Customer::getPrimaryKey() const
{
    assert(customerid_);
    return *customerid_;
}

const std::string &Customer::getValueOfFirstname() const noexcept
{
    const static std::string defaultValue = std::string();
    if(firstname_)
        return *firstname_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Customer::getFirstname() const noexcept
{
    return firstname_;
}
void Customer::setFirstname(const std::string &pFirstname) noexcept
{
    firstname_ = std::make_shared<std::string>(pFirstname);
    dirtyFlag_[1] = true;
}
void Customer::setFirstname(std::string &&pFirstname) noexcept
{
    firstname_ = std::make_shared<std::string>(std::move(pFirstname));
    dirtyFlag_[1] = true;
}

const std::string &Customer::getValueOfLastname() const noexcept
{
    const static std::string defaultValue = std::string();
    if(lastname_)
        return *lastname_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Customer::getLastname() const noexcept
{
    return lastname_;
}
void Customer::setLastname(const std::string &pLastname) noexcept
{
    lastname_ = std::make_shared<std::string>(pLastname);
    dirtyFlag_[2] = true;
}
void Customer::setLastname(std::string &&pLastname) noexcept
{
    lastname_ = std::make_shared<std::string>(std::move(pLastname));
    dirtyFlag_[2] = true;
}

const std::string &Customer::getValueOfCompany() const noexcept
{
    const static std::string defaultValue = std::string();
    if(company_)
        return *company_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Customer::getCompany() const noexcept
{
    return company_;
}
void Customer::setCompany(const std::string &pCompany) noexcept
{
    company_ = std::make_shared<std::string>(pCompany);
    dirtyFlag_[3] = true;
}
void Customer::setCompany(std::string &&pCompany) noexcept
{
    company_ = std::make_shared<std::string>(std::move(pCompany));
    dirtyFlag_[3] = true;
}
void Customer::setCompanyToNull() noexcept
{
    company_.reset();
    dirtyFlag_[3] = true;
}

const std::string &Customer::getValueOfAddress() const noexcept
{
    const static std::string defaultValue = std::string();
    if(address_)
        return *address_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Customer::getAddress() const noexcept
{
    return address_;
}
void Customer::setAddress(const std::string &pAddress) noexcept
{
    address_ = std::make_shared<std::string>(pAddress);
    dirtyFlag_[4] = true;
}
void Customer::setAddress(std::string &&pAddress) noexcept
{
    address_ = std::make_shared<std::string>(std::move(pAddress));
    dirtyFlag_[4] = true;
}
void Customer::setAddressToNull() noexcept
{
    address_.reset();
    dirtyFlag_[4] = true;
}

const std::string &Customer::getValueOfCity() const noexcept
{
    const static std::string defaultValue = std::string();
    if(city_)
        return *city_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Customer::getCity() const noexcept
{
    return city_;
}
void Customer::setCity(const std::string &pCity) noexcept
{
    city_ = std::make_shared<std::string>(pCity);
    dirtyFlag_[5] = true;
}
void Customer::setCity(std::string &&pCity) noexcept
{
    city_ = std::make_shared<std::string>(std::move(pCity));
    dirtyFlag_[5] = true;
}
void Customer::setCityToNull() noexcept
{
    city_.reset();
    dirtyFlag_[5] = true;
}

const std::string &Customer::getValueOfState() const noexcept
{
    const static std::string defaultValue = std::string();
    if(state_)
        return *state_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Customer::getState() const noexcept
{
    return state_;
}
void Customer::setState(const std::string &pState) noexcept
{
    state_ = std::make_shared<std::string>(pState);
    dirtyFlag_[6] = true;
}
void Customer::setState(std::string &&pState) noexcept
{
    state_ = std::make_shared<std::string>(std::move(pState));
    dirtyFlag_[6] = true;
}
void Customer::setStateToNull() noexcept
{
    state_.reset();
    dirtyFlag_[6] = true;
}

const std::string &Customer::getValueOfCountry() const noexcept
{
    const static std::string defaultValue = std::string();
    if(country_)
        return *country_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Customer::getCountry() const noexcept
{
    return country_;
}
void Customer::setCountry(const std::string &pCountry) noexcept
{
    country_ = std::make_shared<std::string>(pCountry);
    dirtyFlag_[7] = true;
}
void Customer::setCountry(std::string &&pCountry) noexcept
{
    country_ = std::make_shared<std::string>(std::move(pCountry));
    dirtyFlag_[7] = true;
}
void Customer::setCountryToNull() noexcept
{
    country_.reset();
    dirtyFlag_[7] = true;
}

const std::string &Customer::getValueOfPostalcode() const noexcept
{
    const static std::string defaultValue = std::string();
    if(postalcode_)
        return *postalcode_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Customer::getPostalcode() const noexcept
{
    return postalcode_;
}
void Customer::setPostalcode(const std::string &pPostalcode) noexcept
{
    postalcode_ = std::make_shared<std::string>(pPostalcode);
    dirtyFlag_[8] = true;
}
void Customer::setPostalcode(std::string &&pPostalcode) noexcept
{
    postalcode_ = std::make_shared<std::string>(std::move(pPostalcode));
    dirtyFlag_[8] = true;
}
void Customer::setPostalcodeToNull() noexcept
{
    postalcode_.reset();
    dirtyFlag_[8] = true;
}

const std::string &Customer::getValueOfPhone() const noexcept
{
    const static std::string defaultValue = std::string();
    if(phone_)
        return *phone_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Customer::getPhone() const noexcept
{
    return phone_;
}
void Customer::setPhone(const std::string &pPhone) noexcept
{
    phone_ = std::make_shared<std::string>(pPhone);
    dirtyFlag_[9] = true;
}
void Customer::setPhone(std::string &&pPhone) noexcept
{
    phone_ = std::make_shared<std::string>(std::move(pPhone));
    dirtyFlag_[9] = true;
}
void Customer::setPhoneToNull() noexcept
{
    phone_.reset();
    dirtyFlag_[9] = true;
}

const std::string &Customer::getValueOfFax() const noexcept
{
    const static std::string defaultValue = std::string();
    if(fax_)
        return *fax_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Customer::getFax() const noexcept
{
    return fax_;
}
void Customer::setFax(const std::string &pFax) noexcept
{
    fax_ = std::make_shared<std::string>(pFax);
    dirtyFlag_[10] = true;
}
void Customer::setFax(std::string &&pFax) noexcept
{
    fax_ = std::make_shared<std::string>(std::move(pFax));
    dirtyFlag_[10] = true;
}
void Customer::setFaxToNull() noexcept
{
    fax_.reset();
    dirtyFlag_[10] = true;
}

const std::string &Customer::getValueOfEmail() const noexcept
{
    const static std::string defaultValue = std::string();
    if(email_)
        return *email_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Customer::getEmail() const noexcept
{
    return email_;
}
void Customer::setEmail(const std::string &pEmail) noexcept
{
    email_ = std::make_shared<std::string>(pEmail);
    dirtyFlag_[11] = true;
}
void Customer::setEmail(std::string &&pEmail) noexcept
{
    email_ = std::make_shared<std::string>(std::move(pEmail));
    dirtyFlag_[11] = true;
}

const uint64_t &Customer::getValueOfSupportrepid() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(supportrepid_)
        return *supportrepid_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &Customer::getSupportrepid() const noexcept
{
    return supportrepid_;
}
void Customer::setSupportrepid(const uint64_t &pSupportrepid) noexcept
{
    supportrepid_ = std::make_shared<uint64_t>(pSupportrepid);
    dirtyFlag_[12] = true;
}
void Customer::setSupportrepidToNull() noexcept
{
    supportrepid_.reset();
    dirtyFlag_[12] = true;
}

void Customer::updateId(const uint64_t id)
{
    customerid_ = std::make_shared<uint64_t>(id);
}

const std::vector<std::string> &Customer::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "FirstName",
        "LastName",
        "Company",
        "Address",
        "City",
        "State",
        "Country",
        "PostalCode",
        "Phone",
        "Fax",
        "Email",
        "SupportRepId"
    };
    return inCols;
}

void Customer::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getFirstname())
        {
            binder << getValueOfFirstname();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getLastname())
        {
            binder << getValueOfLastname();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getCompany())
        {
            binder << getValueOfCompany();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getAddress())
        {
            binder << getValueOfAddress();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getCity())
        {
            binder << getValueOfCity();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getState())
        {
            binder << getValueOfState();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getCountry())
        {
            binder << getValueOfCountry();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getPostalcode())
        {
            binder << getValueOfPostalcode();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getPhone())
        {
            binder << getValueOfPhone();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getFax())
        {
            binder << getValueOfFax();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getEmail())
        {
            binder << getValueOfEmail();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[12])
    {
        if(getSupportrepid())
        {
            binder << getValueOfSupportrepid();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Customer::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    if(dirtyFlag_[7])
    {
        ret.push_back(getColumnName(7));
    }
    if(dirtyFlag_[8])
    {
        ret.push_back(getColumnName(8));
    }
    if(dirtyFlag_[9])
    {
        ret.push_back(getColumnName(9));
    }
    if(dirtyFlag_[10])
    {
        ret.push_back(getColumnName(10));
    }
    if(dirtyFlag_[11])
    {
        ret.push_back(getColumnName(11));
    }
    if(dirtyFlag_[12])
    {
        ret.push_back(getColumnName(12));
    }
    return ret;
}

void Customer::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getFirstname())
        {
            binder << getValueOfFirstname();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getLastname())
        {
            binder << getValueOfLastname();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getCompany())
        {
            binder << getValueOfCompany();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getAddress())
        {
            binder << getValueOfAddress();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getCity())
        {
            binder << getValueOfCity();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getState())
        {
            binder << getValueOfState();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getCountry())
        {
            binder << getValueOfCountry();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getPostalcode())
        {
            binder << getValueOfPostalcode();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getPhone())
        {
            binder << getValueOfPhone();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getFax())
        {
            binder << getValueOfFax();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getEmail())
        {
            binder << getValueOfEmail();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[12])
    {
        if(getSupportrepid())
        {
            binder << getValueOfSupportrepid();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Customer::toJson() const
{
    Json::Value ret;
    if(getCustomerid())
    {
        ret["CustomerId"]=(Json::UInt64)getValueOfCustomerid();
    }
    else
    {
        ret["CustomerId"]=Json::Value();
    }
    if(getFirstname())
    {
        ret["FirstName"]=getValueOfFirstname();
    }
    else
    {
        ret["FirstName"]=Json::Value();
    }
    if(getLastname())
    {
        ret["LastName"]=getValueOfLastname();
    }
    else
    {
        ret["LastName"]=Json::Value();
    }
    if(getCompany())
    {
        ret["Company"]=getValueOfCompany();
    }
    else
    {
        ret["Company"]=Json::Value();
    }
    if(getAddress())
    {
        ret["Address"]=getValueOfAddress();
    }
    else
    {
        ret["Address"]=Json::Value();
    }
    if(getCity())
    {
        ret["City"]=getValueOfCity();
    }
    else
    {
        ret["City"]=Json::Value();
    }
    if(getState())
    {
        ret["State"]=getValueOfState();
    }
    else
    {
        ret["State"]=Json::Value();
    }
    if(getCountry())
    {
        ret["Country"]=getValueOfCountry();
    }
    else
    {
        ret["Country"]=Json::Value();
    }
    if(getPostalcode())
    {
        ret["PostalCode"]=getValueOfPostalcode();
    }
    else
    {
        ret["PostalCode"]=Json::Value();
    }
    if(getPhone())
    {
        ret["Phone"]=getValueOfPhone();
    }
    else
    {
        ret["Phone"]=Json::Value();
    }
    if(getFax())
    {
        ret["Fax"]=getValueOfFax();
    }
    else
    {
        ret["Fax"]=Json::Value();
    }
    if(getEmail())
    {
        ret["Email"]=getValueOfEmail();
    }
    else
    {
        ret["Email"]=Json::Value();
    }
    if(getSupportrepid())
    {
        ret["SupportRepId"]=(Json::UInt64)getValueOfSupportrepid();
    }
    else
    {
        ret["SupportRepId"]=Json::Value();
    }
    return ret;
}

Json::Value Customer::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 13)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getCustomerid())
            {
                ret[pMasqueradingVector[0]]=(Json::UInt64)getValueOfCustomerid();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getFirstname())
            {
                ret[pMasqueradingVector[1]]=getValueOfFirstname();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getLastname())
            {
                ret[pMasqueradingVector[2]]=getValueOfLastname();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getCompany())
            {
                ret[pMasqueradingVector[3]]=getValueOfCompany();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getAddress())
            {
                ret[pMasqueradingVector[4]]=getValueOfAddress();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getCity())
            {
                ret[pMasqueradingVector[5]]=getValueOfCity();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getState())
            {
                ret[pMasqueradingVector[6]]=getValueOfState();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getCountry())
            {
                ret[pMasqueradingVector[7]]=getValueOfCountry();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[8].empty())
        {
            if(getPostalcode())
            {
                ret[pMasqueradingVector[8]]=getValueOfPostalcode();
            }
            else
            {
                ret[pMasqueradingVector[8]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[9].empty())
        {
            if(getPhone())
            {
                ret[pMasqueradingVector[9]]=getValueOfPhone();
            }
            else
            {
                ret[pMasqueradingVector[9]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[10].empty())
        {
            if(getFax())
            {
                ret[pMasqueradingVector[10]]=getValueOfFax();
            }
            else
            {
                ret[pMasqueradingVector[10]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[11].empty())
        {
            if(getEmail())
            {
                ret[pMasqueradingVector[11]]=getValueOfEmail();
            }
            else
            {
                ret[pMasqueradingVector[11]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[12].empty())
        {
            if(getSupportrepid())
            {
                ret[pMasqueradingVector[12]]=(Json::UInt64)getValueOfSupportrepid();
            }
            else
            {
                ret[pMasqueradingVector[12]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getCustomerid())
    {
        ret["CustomerId"]=(Json::UInt64)getValueOfCustomerid();
    }
    else
    {
        ret["CustomerId"]=Json::Value();
    }
    if(getFirstname())
    {
        ret["FirstName"]=getValueOfFirstname();
    }
    else
    {
        ret["FirstName"]=Json::Value();
    }
    if(getLastname())
    {
        ret["LastName"]=getValueOfLastname();
    }
    else
    {
        ret["LastName"]=Json::Value();
    }
    if(getCompany())
    {
        ret["Company"]=getValueOfCompany();
    }
    else
    {
        ret["Company"]=Json::Value();
    }
    if(getAddress())
    {
        ret["Address"]=getValueOfAddress();
    }
    else
    {
        ret["Address"]=Json::Value();
    }
    if(getCity())
    {
        ret["City"]=getValueOfCity();
    }
    else
    {
        ret["City"]=Json::Value();
    }
    if(getState())
    {
        ret["State"]=getValueOfState();
    }
    else
    {
        ret["State"]=Json::Value();
    }
    if(getCountry())
    {
        ret["Country"]=getValueOfCountry();
    }
    else
    {
        ret["Country"]=Json::Value();
    }
    if(getPostalcode())
    {
        ret["PostalCode"]=getValueOfPostalcode();
    }
    else
    {
        ret["PostalCode"]=Json::Value();
    }
    if(getPhone())
    {
        ret["Phone"]=getValueOfPhone();
    }
    else
    {
        ret["Phone"]=Json::Value();
    }
    if(getFax())
    {
        ret["Fax"]=getValueOfFax();
    }
    else
    {
        ret["Fax"]=Json::Value();
    }
    if(getEmail())
    {
        ret["Email"]=getValueOfEmail();
    }
    else
    {
        ret["Email"]=Json::Value();
    }
    if(getSupportrepid())
    {
        ret["SupportRepId"]=(Json::UInt64)getValueOfSupportrepid();
    }
    else
    {
        ret["SupportRepId"]=Json::Value();
    }
    return ret;
}

bool Customer::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("CustomerId"))
    {
        if(!validJsonOfField(0, "CustomerId", pJson["CustomerId"], err, true))
            return false;
    }
    if(pJson.isMember("FirstName"))
    {
        if(!validJsonOfField(1, "FirstName", pJson["FirstName"], err, true))
            return false;
    }
    else
    {
        err="The FirstName column cannot be null";
        return false;
    }
    if(pJson.isMember("LastName"))
    {
        if(!validJsonOfField(2, "LastName", pJson["LastName"], err, true))
            return false;
    }
    else
    {
        err="The LastName column cannot be null";
        return false;
    }
    if(pJson.isMember("Company"))
    {
        if(!validJsonOfField(3, "Company", pJson["Company"], err, true))
            return false;
    }
    if(pJson.isMember("Address"))
    {
        if(!validJsonOfField(4, "Address", pJson["Address"], err, true))
            return false;
    }
    if(pJson.isMember("City"))
    {
        if(!validJsonOfField(5, "City", pJson["City"], err, true))
            return false;
    }
    if(pJson.isMember("State"))
    {
        if(!validJsonOfField(6, "State", pJson["State"], err, true))
            return false;
    }
    if(pJson.isMember("Country"))
    {
        if(!validJsonOfField(7, "Country", pJson["Country"], err, true))
            return false;
    }
    if(pJson.isMember("PostalCode"))
    {
        if(!validJsonOfField(8, "PostalCode", pJson["PostalCode"], err, true))
            return false;
    }
    if(pJson.isMember("Phone"))
    {
        if(!validJsonOfField(9, "Phone", pJson["Phone"], err, true))
            return false;
    }
    if(pJson.isMember("Fax"))
    {
        if(!validJsonOfField(10, "Fax", pJson["Fax"], err, true))
            return false;
    }
    if(pJson.isMember("Email"))
    {
        if(!validJsonOfField(11, "Email", pJson["Email"], err, true))
            return false;
    }
    else
    {
        err="The Email column cannot be null";
        return false;
    }
    if(pJson.isMember("SupportRepId"))
    {
        if(!validJsonOfField(12, "SupportRepId", pJson["SupportRepId"], err, true))
            return false;
    }
    return true;
}
bool Customer::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                  const std::vector<std::string> &pMasqueradingVector,
                                                  std::string &err)
{
    if(pMasqueradingVector.size() != 13)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[2] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[6].empty())
      {
          if(pJson.isMember(pMasqueradingVector[6]))
          {
              if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[7].empty())
      {
          if(pJson.isMember(pMasqueradingVector[7]))
          {
              if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[8].empty())
      {
          if(pJson.isMember(pMasqueradingVector[8]))
          {
              if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[9].empty())
      {
          if(pJson.isMember(pMasqueradingVector[9]))
          {
              if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[10].empty())
      {
          if(pJson.isMember(pMasqueradingVector[10]))
          {
              if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[11].empty())
      {
          if(pJson.isMember(pMasqueradingVector[11]))
          {
              if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[11] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[12].empty())
      {
          if(pJson.isMember(pMasqueradingVector[12]))
          {
              if(!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Customer::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("CustomerId"))
    {
        if(!validJsonOfField(0, "CustomerId", pJson["CustomerId"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("FirstName"))
    {
        if(!validJsonOfField(1, "FirstName", pJson["FirstName"], err, false))
            return false;
    }
    if(pJson.isMember("LastName"))
    {
        if(!validJsonOfField(2, "LastName", pJson["LastName"], err, false))
            return false;
    }
    if(pJson.isMember("Company"))
    {
        if(!validJsonOfField(3, "Company", pJson["Company"], err, false))
            return false;
    }
    if(pJson.isMember("Address"))
    {
        if(!validJsonOfField(4, "Address", pJson["Address"], err, false))
            return false;
    }
    if(pJson.isMember("City"))
    {
        if(!validJsonOfField(5, "City", pJson["City"], err, false))
            return false;
    }
    if(pJson.isMember("State"))
    {
        if(!validJsonOfField(6, "State", pJson["State"], err, false))
            return false;
    }
    if(pJson.isMember("Country"))
    {
        if(!validJsonOfField(7, "Country", pJson["Country"], err, false))
            return false;
    }
    if(pJson.isMember("PostalCode"))
    {
        if(!validJsonOfField(8, "PostalCode", pJson["PostalCode"], err, false))
            return false;
    }
    if(pJson.isMember("Phone"))
    {
        if(!validJsonOfField(9, "Phone", pJson["Phone"], err, false))
            return false;
    }
    if(pJson.isMember("Fax"))
    {
        if(!validJsonOfField(10, "Fax", pJson["Fax"], err, false))
            return false;
    }
    if(pJson.isMember("Email"))
    {
        if(!validJsonOfField(11, "Email", pJson["Email"], err, false))
            return false;
    }
    if(pJson.isMember("SupportRepId"))
    {
        if(!validJsonOfField(12, "SupportRepId", pJson["SupportRepId"], err, false))
            return false;
    }
    return true;
}
bool Customer::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                const std::vector<std::string> &pMasqueradingVector,
                                                std::string &err)
{
    if(pMasqueradingVector.size() != 13)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
      if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
      {
          if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
              return false;
      }
      if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
      {
          if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
              return false;
      }
      if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
      {
          if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, false))
              return false;
      }
      if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
      {
          if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, false))
              return false;
      }
      if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
      {
          if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, false))
              return false;
      }
      if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
      {
          if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, false))
              return false;
      }
      if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
      {
          if(!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Customer::validJsonOfField(size_t index,
                                const std::string &fieldName,
                                const Json::Value &pJson,
                                std::string &err,
                                bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 4:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 5:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 6:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 7:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 8:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 9:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 10:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 11:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 12:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
