/**
 *
 *  Track.h
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#pragma once
#include <drogon/orm/Result.h>
#include <drogon/orm/Row.h>
#include <drogon/orm/Field.h>
#include <drogon/orm/SqlBinder.h>
#include <drogon/orm/Mapper.h>
#ifdef __cpp_impl_coroutine
#include <drogon/orm/CoroMapper.h>
#endif
#include <trantor/utils/Date.h>
#include <trantor/utils/Logger.h>
#include <json/json.h>
#include <string>
#include <memory>
#include <vector>
#include <tuple>
#include <stdint.h>
#include <iostream>

namespace drogon
{
namespace orm
{
class DbClient;
using DbClientPtr = std::shared_ptr<DbClient>;
}
}
namespace drogon_model
{
namespace sqlite3
{

class Track
{
  public:
    struct Cols
    {
        static const std::string _TrackId;
        static const std::string _Name;
        static const std::string _AlbumId;
        static const std::string _MediaTypeId;
        static const std::string _GenreId;
        static const std::string _Composer;
        static const std::string _Milliseconds;
        static const std::string _Bytes;
        static const std::string _UnitPrice;
    };

    const static int primaryKeyNumber;
    const static std::string tableName;
    const static bool hasPrimaryKey;
    const static std::string primaryKeyName;
    using PrimaryKeyType = uint64_t;
    const PrimaryKeyType &getPrimaryKey() const;

    /**
     * @brief constructor
     * @param r One row of records in the SQL query result.
     * @param indexOffset Set the offset to -1 to access all columns by column names,
     * otherwise access all columns by offsets.
     * @note If the SQL is not a style of 'select * from table_name ...' (select all
     * columns by an asterisk), please set the offset to -1.
     */
    explicit Track(const drogon::orm::Row &r, const ssize_t indexOffset = 0) noexcept;

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     */
    explicit Track(const Json::Value &pJson) noexcept(false);

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     * @param pMasqueradingVector The aliases of table columns.
     */
    Track(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false);

    Track() = default;

    void updateByJson(const Json::Value &pJson) noexcept(false);
    void updateByMasqueradedJson(const Json::Value &pJson,
                                 const std::vector<std::string> &pMasqueradingVector) noexcept(false);
    static bool validateJsonForCreation(const Json::Value &pJson, std::string &err);
    static bool validateMasqueradedJsonForCreation(const Json::Value &,
                                                const std::vector<std::string> &pMasqueradingVector,
                                                    std::string &err);
    static bool validateJsonForUpdate(const Json::Value &pJson, std::string &err);
    static bool validateMasqueradedJsonForUpdate(const Json::Value &,
                                          const std::vector<std::string> &pMasqueradingVector,
                                          std::string &err);
    static bool validJsonOfField(size_t index,
                          const std::string &fieldName,
                          const Json::Value &pJson,
                          std::string &err,
                          bool isForCreation);

    /**  For column TrackId  */
    ///Get the value of the column TrackId, returns the default value if the column is null
    const uint64_t &getValueOfTrackid() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint64_t> &getTrackid() const noexcept;
    ///Set the value of the column TrackId
    void setTrackid(const uint64_t &pTrackid) noexcept;

    /**  For column Name  */
    ///Get the value of the column Name, returns the default value if the column is null
    const std::string &getValueOfName() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getName() const noexcept;
    ///Set the value of the column Name
    void setName(const std::string &pName) noexcept;
    void setName(std::string &&pName) noexcept;

    /**  For column AlbumId  */
    ///Get the value of the column AlbumId, returns the default value if the column is null
    const uint64_t &getValueOfAlbumid() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint64_t> &getAlbumid() const noexcept;
    ///Set the value of the column AlbumId
    void setAlbumid(const uint64_t &pAlbumid) noexcept;
    void setAlbumidToNull() noexcept;

    /**  For column MediaTypeId  */
    ///Get the value of the column MediaTypeId, returns the default value if the column is null
    const uint64_t &getValueOfMediatypeid() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint64_t> &getMediatypeid() const noexcept;
    ///Set the value of the column MediaTypeId
    void setMediatypeid(const uint64_t &pMediatypeid) noexcept;

    /**  For column GenreId  */
    ///Get the value of the column GenreId, returns the default value if the column is null
    const uint64_t &getValueOfGenreid() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint64_t> &getGenreid() const noexcept;
    ///Set the value of the column GenreId
    void setGenreid(const uint64_t &pGenreid) noexcept;
    void setGenreidToNull() noexcept;

    /**  For column Composer  */
    ///Get the value of the column Composer, returns the default value if the column is null
    const std::string &getValueOfComposer() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getComposer() const noexcept;
    ///Set the value of the column Composer
    void setComposer(const std::string &pComposer) noexcept;
    void setComposer(std::string &&pComposer) noexcept;
    void setComposerToNull() noexcept;

    /**  For column Milliseconds  */
    ///Get the value of the column Milliseconds, returns the default value if the column is null
    const uint64_t &getValueOfMilliseconds() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint64_t> &getMilliseconds() const noexcept;
    ///Set the value of the column Milliseconds
    void setMilliseconds(const uint64_t &pMilliseconds) noexcept;

    /**  For column Bytes  */
    ///Get the value of the column Bytes, returns the default value if the column is null
    const uint64_t &getValueOfBytes() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint64_t> &getBytes() const noexcept;
    ///Set the value of the column Bytes
    void setBytes(const uint64_t &pBytes) noexcept;
    void setBytesToNull() noexcept;

    /**  For column UnitPrice  */
    ///Get the value of the column UnitPrice, returns the default value if the column is null
    const std::string &getValueOfUnitprice() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getUnitprice() const noexcept;
    ///Set the value of the column UnitPrice
    void setUnitprice(const std::string &pUnitprice) noexcept;
    void setUnitprice(std::string &&pUnitprice) noexcept;


    static size_t getColumnNumber() noexcept {  return 9;  }
    static const std::string &getColumnName(size_t index) noexcept(false);

    Json::Value toJson() const;
    Json::Value toMasqueradedJson(const std::vector<std::string> &pMasqueradingVector) const;
    /// Relationship interfaces
  private:
    friend drogon::orm::Mapper<Track>;
#ifdef __cpp_impl_coroutine
    friend drogon::orm::CoroMapper<Track>;
#endif
    static const std::vector<std::string> &insertColumns() noexcept;
    void outputArgs(drogon::orm::internal::SqlBinder &binder) const;
    const std::vector<std::string> updateColumns() const;
    void updateArgs(drogon::orm::internal::SqlBinder &binder) const;
    ///For mysql or sqlite3
    void updateId(const uint64_t id);
    std::shared_ptr<uint64_t> trackid_;
    std::shared_ptr<std::string> name_;
    std::shared_ptr<uint64_t> albumid_;
    std::shared_ptr<uint64_t> mediatypeid_;
    std::shared_ptr<uint64_t> genreid_;
    std::shared_ptr<std::string> composer_;
    std::shared_ptr<uint64_t> milliseconds_;
    std::shared_ptr<uint64_t> bytes_;
    std::shared_ptr<std::string> unitprice_;
    struct MetaData
    {
        const std::string colName_;
        const std::string colType_;
        const std::string colDatabaseType_;
        const ssize_t colLength_;
        const bool isAutoVal_;
        const bool isPrimaryKey_;
        const bool notNull_;
    };
    static const std::vector<MetaData> metaData_;
    bool dirtyFlag_[9]={ false };
  public:
    static const std::string &sqlForFindingByPrimaryKey()
    {
        static const std::string sql="select * from " + tableName + " where TrackId = ?";
        return sql;
    }

    static const std::string &sqlForDeletingByPrimaryKey()
    {
        static const std::string sql="delete from " + tableName + " where TrackId = ?";
        return sql;
    }
    std::string sqlForInserting(bool &needSelection) const
    {
        std::string sql="insert into " + tableName + " (";
        size_t parametersCount = 0;
        needSelection = false;
        if(dirtyFlag_[1])
        {
            sql += "Name,";
            ++parametersCount;
        }
        if(dirtyFlag_[2])
        {
            sql += "AlbumId,";
            ++parametersCount;
        }
        if(dirtyFlag_[3])
        {
            sql += "MediaTypeId,";
            ++parametersCount;
        }
        if(dirtyFlag_[4])
        {
            sql += "GenreId,";
            ++parametersCount;
        }
        if(dirtyFlag_[5])
        {
            sql += "Composer,";
            ++parametersCount;
        }
        if(dirtyFlag_[6])
        {
            sql += "Milliseconds,";
            ++parametersCount;
        }
        if(dirtyFlag_[7])
        {
            sql += "Bytes,";
            ++parametersCount;
        }
        if(dirtyFlag_[8])
        {
            sql += "UnitPrice,";
            ++parametersCount;
        }
        if(parametersCount > 0)
        {
            sql[sql.length()-1]=')';
            sql += " values (";
        }
        else
            sql += ") values (";

        if(dirtyFlag_[1])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[2])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[3])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[4])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[5])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[6])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[7])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[8])
        {
            sql.append("?,");

        }
        if(parametersCount > 0)
        {
            sql.resize(sql.length() - 1);
        }
        sql.append(1, ')');
        LOG_TRACE << sql;
        return sql;
    }
};
} // namespace sqlite3
} // namespace drogon_model
