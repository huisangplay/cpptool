/**
 *
 *  Employee.h
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#pragma once
#include <drogon/orm/Result.h>
#include <drogon/orm/Row.h>
#include <drogon/orm/Field.h>
#include <drogon/orm/SqlBinder.h>
#include <drogon/orm/Mapper.h>
#ifdef __cpp_impl_coroutine
#include <drogon/orm/CoroMapper.h>
#endif
#include <trantor/utils/Date.h>
#include <trantor/utils/Logger.h>
#include <json/json.h>
#include <string>
#include <memory>
#include <vector>
#include <tuple>
#include <stdint.h>
#include <iostream>

namespace drogon
{
namespace orm
{
class DbClient;
using DbClientPtr = std::shared_ptr<DbClient>;
}
}
namespace drogon_model
{
namespace sqlite3
{

class Employee
{
  public:
    struct Cols
    {
        static const std::string _EmployeeId;
        static const std::string _LastName;
        static const std::string _FirstName;
        static const std::string _Title;
        static const std::string _ReportsTo;
        static const std::string _BirthDate;
        static const std::string _HireDate;
        static const std::string _Address;
        static const std::string _City;
        static const std::string _State;
        static const std::string _Country;
        static const std::string _PostalCode;
        static const std::string _Phone;
        static const std::string _Fax;
        static const std::string _Email;
    };

    const static int primaryKeyNumber;
    const static std::string tableName;
    const static bool hasPrimaryKey;
    const static std::string primaryKeyName;
    using PrimaryKeyType = uint64_t;
    const PrimaryKeyType &getPrimaryKey() const;

    /**
     * @brief constructor
     * @param r One row of records in the SQL query result.
     * @param indexOffset Set the offset to -1 to access all columns by column names,
     * otherwise access all columns by offsets.
     * @note If the SQL is not a style of 'select * from table_name ...' (select all
     * columns by an asterisk), please set the offset to -1.
     */
    explicit Employee(const drogon::orm::Row &r, const ssize_t indexOffset = 0) noexcept;

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     */
    explicit Employee(const Json::Value &pJson) noexcept(false);

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     * @param pMasqueradingVector The aliases of table columns.
     */
    Employee(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false);

    Employee() = default;

    void updateByJson(const Json::Value &pJson) noexcept(false);
    void updateByMasqueradedJson(const Json::Value &pJson,
                                 const std::vector<std::string> &pMasqueradingVector) noexcept(false);
    static bool validateJsonForCreation(const Json::Value &pJson, std::string &err);
    static bool validateMasqueradedJsonForCreation(const Json::Value &,
                                                const std::vector<std::string> &pMasqueradingVector,
                                                    std::string &err);
    static bool validateJsonForUpdate(const Json::Value &pJson, std::string &err);
    static bool validateMasqueradedJsonForUpdate(const Json::Value &,
                                          const std::vector<std::string> &pMasqueradingVector,
                                          std::string &err);
    static bool validJsonOfField(size_t index,
                          const std::string &fieldName,
                          const Json::Value &pJson,
                          std::string &err,
                          bool isForCreation);

    /**  For column EmployeeId  */
    ///Get the value of the column EmployeeId, returns the default value if the column is null
    const uint64_t &getValueOfEmployeeid() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint64_t> &getEmployeeid() const noexcept;
    ///Set the value of the column EmployeeId
    void setEmployeeid(const uint64_t &pEmployeeid) noexcept;

    /**  For column LastName  */
    ///Get the value of the column LastName, returns the default value if the column is null
    const std::string &getValueOfLastname() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getLastname() const noexcept;
    ///Set the value of the column LastName
    void setLastname(const std::string &pLastname) noexcept;
    void setLastname(std::string &&pLastname) noexcept;

    /**  For column FirstName  */
    ///Get the value of the column FirstName, returns the default value if the column is null
    const std::string &getValueOfFirstname() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getFirstname() const noexcept;
    ///Set the value of the column FirstName
    void setFirstname(const std::string &pFirstname) noexcept;
    void setFirstname(std::string &&pFirstname) noexcept;

    /**  For column Title  */
    ///Get the value of the column Title, returns the default value if the column is null
    const std::string &getValueOfTitle() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getTitle() const noexcept;
    ///Set the value of the column Title
    void setTitle(const std::string &pTitle) noexcept;
    void setTitle(std::string &&pTitle) noexcept;
    void setTitleToNull() noexcept;

    /**  For column ReportsTo  */
    ///Get the value of the column ReportsTo, returns the default value if the column is null
    const uint64_t &getValueOfReportsto() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint64_t> &getReportsto() const noexcept;
    ///Set the value of the column ReportsTo
    void setReportsto(const uint64_t &pReportsto) noexcept;
    void setReportstoToNull() noexcept;

    /**  For column BirthDate  */
    ///Get the value of the column BirthDate, returns the default value if the column is null
    const ::trantor::Date &getValueOfBirthdate() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getBirthdate() const noexcept;
    ///Set the value of the column BirthDate
    void setBirthdate(const ::trantor::Date &pBirthdate) noexcept;
    void setBirthdateToNull() noexcept;

    /**  For column HireDate  */
    ///Get the value of the column HireDate, returns the default value if the column is null
    const ::trantor::Date &getValueOfHiredate() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getHiredate() const noexcept;
    ///Set the value of the column HireDate
    void setHiredate(const ::trantor::Date &pHiredate) noexcept;
    void setHiredateToNull() noexcept;

    /**  For column Address  */
    ///Get the value of the column Address, returns the default value if the column is null
    const std::string &getValueOfAddress() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getAddress() const noexcept;
    ///Set the value of the column Address
    void setAddress(const std::string &pAddress) noexcept;
    void setAddress(std::string &&pAddress) noexcept;
    void setAddressToNull() noexcept;

    /**  For column City  */
    ///Get the value of the column City, returns the default value if the column is null
    const std::string &getValueOfCity() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getCity() const noexcept;
    ///Set the value of the column City
    void setCity(const std::string &pCity) noexcept;
    void setCity(std::string &&pCity) noexcept;
    void setCityToNull() noexcept;

    /**  For column State  */
    ///Get the value of the column State, returns the default value if the column is null
    const std::string &getValueOfState() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getState() const noexcept;
    ///Set the value of the column State
    void setState(const std::string &pState) noexcept;
    void setState(std::string &&pState) noexcept;
    void setStateToNull() noexcept;

    /**  For column Country  */
    ///Get the value of the column Country, returns the default value if the column is null
    const std::string &getValueOfCountry() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getCountry() const noexcept;
    ///Set the value of the column Country
    void setCountry(const std::string &pCountry) noexcept;
    void setCountry(std::string &&pCountry) noexcept;
    void setCountryToNull() noexcept;

    /**  For column PostalCode  */
    ///Get the value of the column PostalCode, returns the default value if the column is null
    const std::string &getValueOfPostalcode() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getPostalcode() const noexcept;
    ///Set the value of the column PostalCode
    void setPostalcode(const std::string &pPostalcode) noexcept;
    void setPostalcode(std::string &&pPostalcode) noexcept;
    void setPostalcodeToNull() noexcept;

    /**  For column Phone  */
    ///Get the value of the column Phone, returns the default value if the column is null
    const std::string &getValueOfPhone() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getPhone() const noexcept;
    ///Set the value of the column Phone
    void setPhone(const std::string &pPhone) noexcept;
    void setPhone(std::string &&pPhone) noexcept;
    void setPhoneToNull() noexcept;

    /**  For column Fax  */
    ///Get the value of the column Fax, returns the default value if the column is null
    const std::string &getValueOfFax() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getFax() const noexcept;
    ///Set the value of the column Fax
    void setFax(const std::string &pFax) noexcept;
    void setFax(std::string &&pFax) noexcept;
    void setFaxToNull() noexcept;

    /**  For column Email  */
    ///Get the value of the column Email, returns the default value if the column is null
    const std::string &getValueOfEmail() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getEmail() const noexcept;
    ///Set the value of the column Email
    void setEmail(const std::string &pEmail) noexcept;
    void setEmail(std::string &&pEmail) noexcept;
    void setEmailToNull() noexcept;


    static size_t getColumnNumber() noexcept {  return 15;  }
    static const std::string &getColumnName(size_t index) noexcept(false);

    Json::Value toJson() const;
    Json::Value toMasqueradedJson(const std::vector<std::string> &pMasqueradingVector) const;
    /// Relationship interfaces
  private:
    friend drogon::orm::Mapper<Employee>;
#ifdef __cpp_impl_coroutine
    friend drogon::orm::CoroMapper<Employee>;
#endif
    static const std::vector<std::string> &insertColumns() noexcept;
    void outputArgs(drogon::orm::internal::SqlBinder &binder) const;
    const std::vector<std::string> updateColumns() const;
    void updateArgs(drogon::orm::internal::SqlBinder &binder) const;
    ///For mysql or sqlite3
    void updateId(const uint64_t id);
    std::shared_ptr<uint64_t> employeeid_;
    std::shared_ptr<std::string> lastname_;
    std::shared_ptr<std::string> firstname_;
    std::shared_ptr<std::string> title_;
    std::shared_ptr<uint64_t> reportsto_;
    std::shared_ptr<::trantor::Date> birthdate_;
    std::shared_ptr<::trantor::Date> hiredate_;
    std::shared_ptr<std::string> address_;
    std::shared_ptr<std::string> city_;
    std::shared_ptr<std::string> state_;
    std::shared_ptr<std::string> country_;
    std::shared_ptr<std::string> postalcode_;
    std::shared_ptr<std::string> phone_;
    std::shared_ptr<std::string> fax_;
    std::shared_ptr<std::string> email_;
    struct MetaData
    {
        const std::string colName_;
        const std::string colType_;
        const std::string colDatabaseType_;
        const ssize_t colLength_;
        const bool isAutoVal_;
        const bool isPrimaryKey_;
        const bool notNull_;
    };
    static const std::vector<MetaData> metaData_;
    bool dirtyFlag_[15]={ false };
  public:
    static const std::string &sqlForFindingByPrimaryKey()
    {
        static const std::string sql="select * from " + tableName + " where EmployeeId = ?";
        return sql;
    }

    static const std::string &sqlForDeletingByPrimaryKey()
    {
        static const std::string sql="delete from " + tableName + " where EmployeeId = ?";
        return sql;
    }
    std::string sqlForInserting(bool &needSelection) const
    {
        std::string sql="insert into " + tableName + " (";
        size_t parametersCount = 0;
        needSelection = false;
        if(dirtyFlag_[1])
        {
            sql += "LastName,";
            ++parametersCount;
        }
        if(dirtyFlag_[2])
        {
            sql += "FirstName,";
            ++parametersCount;
        }
        if(dirtyFlag_[3])
        {
            sql += "Title,";
            ++parametersCount;
        }
        if(dirtyFlag_[4])
        {
            sql += "ReportsTo,";
            ++parametersCount;
        }
        if(dirtyFlag_[5])
        {
            sql += "BirthDate,";
            ++parametersCount;
        }
        if(dirtyFlag_[6])
        {
            sql += "HireDate,";
            ++parametersCount;
        }
        if(dirtyFlag_[7])
        {
            sql += "Address,";
            ++parametersCount;
        }
        if(dirtyFlag_[8])
        {
            sql += "City,";
            ++parametersCount;
        }
        if(dirtyFlag_[9])
        {
            sql += "State,";
            ++parametersCount;
        }
        if(dirtyFlag_[10])
        {
            sql += "Country,";
            ++parametersCount;
        }
        if(dirtyFlag_[11])
        {
            sql += "PostalCode,";
            ++parametersCount;
        }
        if(dirtyFlag_[12])
        {
            sql += "Phone,";
            ++parametersCount;
        }
        if(dirtyFlag_[13])
        {
            sql += "Fax,";
            ++parametersCount;
        }
        if(dirtyFlag_[14])
        {
            sql += "Email,";
            ++parametersCount;
        }
        if(parametersCount > 0)
        {
            sql[sql.length()-1]=')';
            sql += " values (";
        }
        else
            sql += ") values (";

        if(dirtyFlag_[1])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[2])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[3])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[4])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[5])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[6])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[7])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[8])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[9])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[10])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[11])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[12])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[13])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[14])
        {
            sql.append("?,");

        }
        if(parametersCount > 0)
        {
            sql.resize(sql.length() - 1);
        }
        sql.append(1, ')');
        LOG_TRACE << sql;
        return sql;
    }
};
} // namespace sqlite3
} // namespace drogon_model
