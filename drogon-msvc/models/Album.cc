/**
 *
 *  Album.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Album.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::sqlite3;

const std::string Album::Cols::_AlbumId = "AlbumId";
const std::string Album::Cols::_Title = "Title";
const std::string Album::Cols::_ArtistId = "ArtistId";
const std::string Album::primaryKeyName = "AlbumId";
const bool Album::hasPrimaryKey = true;
const std::string Album::tableName = "album";

const std::vector<typename Album::MetaData> Album::metaData_={
{"AlbumId","uint64_t","integer",8,1,1,1},
{"Title","std::string","nvarchar(160)",0,0,0,1},
{"ArtistId","uint64_t","integer",8,0,0,1}
};
const std::string &Album::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Album::Album(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["AlbumId"].isNull())
        {
            albumid_=std::make_shared<uint64_t>(r["AlbumId"].as<uint64_t>());
        }
        if(!r["Title"].isNull())
        {
            title_=std::make_shared<std::string>(r["Title"].as<std::string>());
        }
        if(!r["ArtistId"].isNull())
        {
            artistid_=std::make_shared<uint64_t>(r["ArtistId"].as<uint64_t>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 3 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            albumid_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            title_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            artistid_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
    }

}

Album::Album(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 3)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            albumid_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            title_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            artistid_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[2]].asUInt64());
        }
    }
}

Album::Album(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("AlbumId"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["AlbumId"].isNull())
        {
            albumid_=std::make_shared<uint64_t>((uint64_t)pJson["AlbumId"].asUInt64());
        }
    }
    if(pJson.isMember("Title"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["Title"].isNull())
        {
            title_=std::make_shared<std::string>(pJson["Title"].asString());
        }
    }
    if(pJson.isMember("ArtistId"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["ArtistId"].isNull())
        {
            artistid_=std::make_shared<uint64_t>((uint64_t)pJson["ArtistId"].asUInt64());
        }
    }
}

void Album::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 3)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            albumid_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            title_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            artistid_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[2]].asUInt64());
        }
    }
}

void Album::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("AlbumId"))
    {
        if(!pJson["AlbumId"].isNull())
        {
            albumid_=std::make_shared<uint64_t>((uint64_t)pJson["AlbumId"].asUInt64());
        }
    }
    if(pJson.isMember("Title"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["Title"].isNull())
        {
            title_=std::make_shared<std::string>(pJson["Title"].asString());
        }
    }
    if(pJson.isMember("ArtistId"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["ArtistId"].isNull())
        {
            artistid_=std::make_shared<uint64_t>((uint64_t)pJson["ArtistId"].asUInt64());
        }
    }
}

const uint64_t &Album::getValueOfAlbumid() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(albumid_)
        return *albumid_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &Album::getAlbumid() const noexcept
{
    return albumid_;
}
void Album::setAlbumid(const uint64_t &pAlbumid) noexcept
{
    albumid_ = std::make_shared<uint64_t>(pAlbumid);
    dirtyFlag_[0] = true;
}
const typename Album::PrimaryKeyType & Album::getPrimaryKey() const
{
    assert(albumid_);
    return *albumid_;
}

const std::string &Album::getValueOfTitle() const noexcept
{
    const static std::string defaultValue = std::string();
    if(title_)
        return *title_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Album::getTitle() const noexcept
{
    return title_;
}
void Album::setTitle(const std::string &pTitle) noexcept
{
    title_ = std::make_shared<std::string>(pTitle);
    dirtyFlag_[1] = true;
}
void Album::setTitle(std::string &&pTitle) noexcept
{
    title_ = std::make_shared<std::string>(std::move(pTitle));
    dirtyFlag_[1] = true;
}

const uint64_t &Album::getValueOfArtistid() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(artistid_)
        return *artistid_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &Album::getArtistid() const noexcept
{
    return artistid_;
}
void Album::setArtistid(const uint64_t &pArtistid) noexcept
{
    artistid_ = std::make_shared<uint64_t>(pArtistid);
    dirtyFlag_[2] = true;
}

void Album::updateId(const uint64_t id)
{
    albumid_ = std::make_shared<uint64_t>(id);
}

const std::vector<std::string> &Album::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "Title",
        "ArtistId"
    };
    return inCols;
}

void Album::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getTitle())
        {
            binder << getValueOfTitle();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getArtistid())
        {
            binder << getValueOfArtistid();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Album::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    return ret;
}

void Album::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getTitle())
        {
            binder << getValueOfTitle();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getArtistid())
        {
            binder << getValueOfArtistid();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Album::toJson() const
{
    Json::Value ret;
    if(getAlbumid())
    {
        ret["AlbumId"]=(Json::UInt64)getValueOfAlbumid();
    }
    else
    {
        ret["AlbumId"]=Json::Value();
    }
    if(getTitle())
    {
        ret["Title"]=getValueOfTitle();
    }
    else
    {
        ret["Title"]=Json::Value();
    }
    if(getArtistid())
    {
        ret["ArtistId"]=(Json::UInt64)getValueOfArtistid();
    }
    else
    {
        ret["ArtistId"]=Json::Value();
    }
    return ret;
}

Json::Value Album::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 3)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getAlbumid())
            {
                ret[pMasqueradingVector[0]]=(Json::UInt64)getValueOfAlbumid();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getTitle())
            {
                ret[pMasqueradingVector[1]]=getValueOfTitle();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getArtistid())
            {
                ret[pMasqueradingVector[2]]=(Json::UInt64)getValueOfArtistid();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getAlbumid())
    {
        ret["AlbumId"]=(Json::UInt64)getValueOfAlbumid();
    }
    else
    {
        ret["AlbumId"]=Json::Value();
    }
    if(getTitle())
    {
        ret["Title"]=getValueOfTitle();
    }
    else
    {
        ret["Title"]=Json::Value();
    }
    if(getArtistid())
    {
        ret["ArtistId"]=(Json::UInt64)getValueOfArtistid();
    }
    else
    {
        ret["ArtistId"]=Json::Value();
    }
    return ret;
}

bool Album::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("AlbumId"))
    {
        if(!validJsonOfField(0, "AlbumId", pJson["AlbumId"], err, true))
            return false;
    }
    if(pJson.isMember("Title"))
    {
        if(!validJsonOfField(1, "Title", pJson["Title"], err, true))
            return false;
    }
    else
    {
        err="The Title column cannot be null";
        return false;
    }
    if(pJson.isMember("ArtistId"))
    {
        if(!validJsonOfField(2, "ArtistId", pJson["ArtistId"], err, true))
            return false;
    }
    else
    {
        err="The ArtistId column cannot be null";
        return false;
    }
    return true;
}
bool Album::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                               const std::vector<std::string> &pMasqueradingVector,
                                               std::string &err)
{
    if(pMasqueradingVector.size() != 3)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[2] + " column cannot be null";
            return false;
        }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Album::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("AlbumId"))
    {
        if(!validJsonOfField(0, "AlbumId", pJson["AlbumId"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("Title"))
    {
        if(!validJsonOfField(1, "Title", pJson["Title"], err, false))
            return false;
    }
    if(pJson.isMember("ArtistId"))
    {
        if(!validJsonOfField(2, "ArtistId", pJson["ArtistId"], err, false))
            return false;
    }
    return true;
}
bool Album::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                             const std::vector<std::string> &pMasqueradingVector,
                                             std::string &err)
{
    if(pMasqueradingVector.size() != 3)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Album::validJsonOfField(size_t index,
                             const std::string &fieldName,
                             const Json::Value &pJson,
                             std::string &err,
                             bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
