/**
 *
 *  Playlisttrack.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Playlisttrack.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::sqlite3;

const std::string Playlisttrack::Cols::_PlaylistId = "PlaylistId";
const std::string Playlisttrack::Cols::_TrackId = "TrackId";
const std::vector<std::string> Playlisttrack::primaryKeyName = {"PlaylistId","TrackId"};
const bool Playlisttrack::hasPrimaryKey = true;
const std::string Playlisttrack::tableName = "playlisttrack";

const std::vector<typename Playlisttrack::MetaData> Playlisttrack::metaData_={
{"PlaylistId","uint64_t","integer",8,0,1,1},
{"TrackId","uint64_t","integer",8,0,1,1}
};
const std::string &Playlisttrack::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Playlisttrack::Playlisttrack(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["PlaylistId"].isNull())
        {
            playlistid_=std::make_shared<uint64_t>(r["PlaylistId"].as<uint64_t>());
        }
        if(!r["TrackId"].isNull())
        {
            trackid_=std::make_shared<uint64_t>(r["TrackId"].as<uint64_t>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 2 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            playlistid_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            trackid_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
    }

}

Playlisttrack::Playlisttrack(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 2)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            playlistid_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            trackid_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[1]].asUInt64());
        }
    }
}

Playlisttrack::Playlisttrack(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("PlaylistId"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["PlaylistId"].isNull())
        {
            playlistid_=std::make_shared<uint64_t>((uint64_t)pJson["PlaylistId"].asUInt64());
        }
    }
    if(pJson.isMember("TrackId"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["TrackId"].isNull())
        {
            trackid_=std::make_shared<uint64_t>((uint64_t)pJson["TrackId"].asUInt64());
        }
    }
}

void Playlisttrack::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 2)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            playlistid_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            trackid_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[1]].asUInt64());
        }
    }
}

void Playlisttrack::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("PlaylistId"))
    {
        if(!pJson["PlaylistId"].isNull())
        {
            playlistid_=std::make_shared<uint64_t>((uint64_t)pJson["PlaylistId"].asUInt64());
        }
    }
    if(pJson.isMember("TrackId"))
    {
        if(!pJson["TrackId"].isNull())
        {
            trackid_=std::make_shared<uint64_t>((uint64_t)pJson["TrackId"].asUInt64());
        }
    }
}

const uint64_t &Playlisttrack::getValueOfPlaylistid() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(playlistid_)
        return *playlistid_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &Playlisttrack::getPlaylistid() const noexcept
{
    return playlistid_;
}
void Playlisttrack::setPlaylistid(const uint64_t &pPlaylistid) noexcept
{
    playlistid_ = std::make_shared<uint64_t>(pPlaylistid);
    dirtyFlag_[0] = true;
}

const uint64_t &Playlisttrack::getValueOfTrackid() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(trackid_)
        return *trackid_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &Playlisttrack::getTrackid() const noexcept
{
    return trackid_;
}
void Playlisttrack::setTrackid(const uint64_t &pTrackid) noexcept
{
    trackid_ = std::make_shared<uint64_t>(pTrackid);
    dirtyFlag_[1] = true;
}

void Playlisttrack::updateId(const uint64_t id)
{
}
typename Playlisttrack::PrimaryKeyType Playlisttrack::getPrimaryKey() const
{
    return std::make_tuple(*playlistid_,*trackid_);
}

const std::vector<std::string> &Playlisttrack::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "PlaylistId",
        "TrackId"
    };
    return inCols;
}

void Playlisttrack::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getPlaylistid())
        {
            binder << getValueOfPlaylistid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getTrackid())
        {
            binder << getValueOfTrackid();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Playlisttrack::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[0])
    {
        ret.push_back(getColumnName(0));
    }
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    return ret;
}

void Playlisttrack::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getPlaylistid())
        {
            binder << getValueOfPlaylistid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getTrackid())
        {
            binder << getValueOfTrackid();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Playlisttrack::toJson() const
{
    Json::Value ret;
    if(getPlaylistid())
    {
        ret["PlaylistId"]=(Json::UInt64)getValueOfPlaylistid();
    }
    else
    {
        ret["PlaylistId"]=Json::Value();
    }
    if(getTrackid())
    {
        ret["TrackId"]=(Json::UInt64)getValueOfTrackid();
    }
    else
    {
        ret["TrackId"]=Json::Value();
    }
    return ret;
}

Json::Value Playlisttrack::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 2)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getPlaylistid())
            {
                ret[pMasqueradingVector[0]]=(Json::UInt64)getValueOfPlaylistid();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getTrackid())
            {
                ret[pMasqueradingVector[1]]=(Json::UInt64)getValueOfTrackid();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getPlaylistid())
    {
        ret["PlaylistId"]=(Json::UInt64)getValueOfPlaylistid();
    }
    else
    {
        ret["PlaylistId"]=Json::Value();
    }
    if(getTrackid())
    {
        ret["TrackId"]=(Json::UInt64)getValueOfTrackid();
    }
    else
    {
        ret["TrackId"]=Json::Value();
    }
    return ret;
}

bool Playlisttrack::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("PlaylistId"))
    {
        if(!validJsonOfField(0, "PlaylistId", pJson["PlaylistId"], err, true))
            return false;
    }
    else
    {
        err="The PlaylistId column cannot be null";
        return false;
    }
    if(pJson.isMember("TrackId"))
    {
        if(!validJsonOfField(1, "TrackId", pJson["TrackId"], err, true))
            return false;
    }
    else
    {
        err="The TrackId column cannot be null";
        return false;
    }
    return true;
}
bool Playlisttrack::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                       const std::vector<std::string> &pMasqueradingVector,
                                                       std::string &err)
{
    if(pMasqueradingVector.size() != 2)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[0] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Playlisttrack::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("PlaylistId"))
    {
        if(!validJsonOfField(0, "PlaylistId", pJson["PlaylistId"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("TrackId"))
    {
        if(!validJsonOfField(1, "TrackId", pJson["TrackId"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    return true;
}
bool Playlisttrack::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                     const std::vector<std::string> &pMasqueradingVector,
                                                     std::string &err)
{
    if(pMasqueradingVector.size() != 2)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Playlisttrack::validJsonOfField(size_t index,
                                     const std::string &fieldName,
                                     const Json::Value &pJson,
                                     std::string &err,
                                     bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
