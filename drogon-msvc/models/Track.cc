/**
 *
 *  Track.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Track.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::sqlite3;

const std::string Track::Cols::_TrackId = "TrackId";
const std::string Track::Cols::_Name = "Name";
const std::string Track::Cols::_AlbumId = "AlbumId";
const std::string Track::Cols::_MediaTypeId = "MediaTypeId";
const std::string Track::Cols::_GenreId = "GenreId";
const std::string Track::Cols::_Composer = "Composer";
const std::string Track::Cols::_Milliseconds = "Milliseconds";
const std::string Track::Cols::_Bytes = "Bytes";
const std::string Track::Cols::_UnitPrice = "UnitPrice";
const std::string Track::primaryKeyName = "TrackId";
const bool Track::hasPrimaryKey = true;
const std::string Track::tableName = "track";

const std::vector<typename Track::MetaData> Track::metaData_={
{"TrackId","uint64_t","integer",8,1,1,1},
{"Name","std::string","nvarchar(200)",0,0,0,1},
{"AlbumId","uint64_t","integer",8,0,0,0},
{"MediaTypeId","uint64_t","integer",8,0,0,1},
{"GenreId","uint64_t","integer",8,0,0,0},
{"Composer","std::string","nvarchar(220)",0,0,0,0},
{"Milliseconds","uint64_t","integer",8,0,0,1},
{"Bytes","uint64_t","integer",8,0,0,0},
{"UnitPrice","std::string","numeric(10,2)",0,0,0,1}
};
const std::string &Track::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Track::Track(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["TrackId"].isNull())
        {
            trackid_=std::make_shared<uint64_t>(r["TrackId"].as<uint64_t>());
        }
        if(!r["Name"].isNull())
        {
            name_=std::make_shared<std::string>(r["Name"].as<std::string>());
        }
        if(!r["AlbumId"].isNull())
        {
            albumid_=std::make_shared<uint64_t>(r["AlbumId"].as<uint64_t>());
        }
        if(!r["MediaTypeId"].isNull())
        {
            mediatypeid_=std::make_shared<uint64_t>(r["MediaTypeId"].as<uint64_t>());
        }
        if(!r["GenreId"].isNull())
        {
            genreid_=std::make_shared<uint64_t>(r["GenreId"].as<uint64_t>());
        }
        if(!r["Composer"].isNull())
        {
            composer_=std::make_shared<std::string>(r["Composer"].as<std::string>());
        }
        if(!r["Milliseconds"].isNull())
        {
            milliseconds_=std::make_shared<uint64_t>(r["Milliseconds"].as<uint64_t>());
        }
        if(!r["Bytes"].isNull())
        {
            bytes_=std::make_shared<uint64_t>(r["Bytes"].as<uint64_t>());
        }
        if(!r["UnitPrice"].isNull())
        {
            unitprice_=std::make_shared<std::string>(r["UnitPrice"].as<std::string>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 9 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            trackid_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            name_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            albumid_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            mediatypeid_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            genreid_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            composer_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            milliseconds_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            bytes_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 8;
        if(!r[index].isNull())
        {
            unitprice_=std::make_shared<std::string>(r[index].as<std::string>());
        }
    }

}

Track::Track(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 9)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            trackid_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            name_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            albumid_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[2]].asUInt64());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            mediatypeid_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[3]].asUInt64());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            genreid_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[4]].asUInt64());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            composer_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            milliseconds_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[6]].asUInt64());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            bytes_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[7]].asUInt64());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            unitprice_=std::make_shared<std::string>(pJson[pMasqueradingVector[8]].asString());
        }
    }
}

Track::Track(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("TrackId"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["TrackId"].isNull())
        {
            trackid_=std::make_shared<uint64_t>((uint64_t)pJson["TrackId"].asUInt64());
        }
    }
    if(pJson.isMember("Name"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["Name"].isNull())
        {
            name_=std::make_shared<std::string>(pJson["Name"].asString());
        }
    }
    if(pJson.isMember("AlbumId"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["AlbumId"].isNull())
        {
            albumid_=std::make_shared<uint64_t>((uint64_t)pJson["AlbumId"].asUInt64());
        }
    }
    if(pJson.isMember("MediaTypeId"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["MediaTypeId"].isNull())
        {
            mediatypeid_=std::make_shared<uint64_t>((uint64_t)pJson["MediaTypeId"].asUInt64());
        }
    }
    if(pJson.isMember("GenreId"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["GenreId"].isNull())
        {
            genreid_=std::make_shared<uint64_t>((uint64_t)pJson["GenreId"].asUInt64());
        }
    }
    if(pJson.isMember("Composer"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["Composer"].isNull())
        {
            composer_=std::make_shared<std::string>(pJson["Composer"].asString());
        }
    }
    if(pJson.isMember("Milliseconds"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["Milliseconds"].isNull())
        {
            milliseconds_=std::make_shared<uint64_t>((uint64_t)pJson["Milliseconds"].asUInt64());
        }
    }
    if(pJson.isMember("Bytes"))
    {
        dirtyFlag_[7]=true;
        if(!pJson["Bytes"].isNull())
        {
            bytes_=std::make_shared<uint64_t>((uint64_t)pJson["Bytes"].asUInt64());
        }
    }
    if(pJson.isMember("UnitPrice"))
    {
        dirtyFlag_[8]=true;
        if(!pJson["UnitPrice"].isNull())
        {
            unitprice_=std::make_shared<std::string>(pJson["UnitPrice"].asString());
        }
    }
}

void Track::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 9)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            trackid_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            name_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            albumid_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[2]].asUInt64());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            mediatypeid_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[3]].asUInt64());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            genreid_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[4]].asUInt64());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            composer_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            milliseconds_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[6]].asUInt64());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            bytes_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[7]].asUInt64());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            unitprice_=std::make_shared<std::string>(pJson[pMasqueradingVector[8]].asString());
        }
    }
}

void Track::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("TrackId"))
    {
        if(!pJson["TrackId"].isNull())
        {
            trackid_=std::make_shared<uint64_t>((uint64_t)pJson["TrackId"].asUInt64());
        }
    }
    if(pJson.isMember("Name"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["Name"].isNull())
        {
            name_=std::make_shared<std::string>(pJson["Name"].asString());
        }
    }
    if(pJson.isMember("AlbumId"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["AlbumId"].isNull())
        {
            albumid_=std::make_shared<uint64_t>((uint64_t)pJson["AlbumId"].asUInt64());
        }
    }
    if(pJson.isMember("MediaTypeId"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["MediaTypeId"].isNull())
        {
            mediatypeid_=std::make_shared<uint64_t>((uint64_t)pJson["MediaTypeId"].asUInt64());
        }
    }
    if(pJson.isMember("GenreId"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["GenreId"].isNull())
        {
            genreid_=std::make_shared<uint64_t>((uint64_t)pJson["GenreId"].asUInt64());
        }
    }
    if(pJson.isMember("Composer"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["Composer"].isNull())
        {
            composer_=std::make_shared<std::string>(pJson["Composer"].asString());
        }
    }
    if(pJson.isMember("Milliseconds"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["Milliseconds"].isNull())
        {
            milliseconds_=std::make_shared<uint64_t>((uint64_t)pJson["Milliseconds"].asUInt64());
        }
    }
    if(pJson.isMember("Bytes"))
    {
        dirtyFlag_[7] = true;
        if(!pJson["Bytes"].isNull())
        {
            bytes_=std::make_shared<uint64_t>((uint64_t)pJson["Bytes"].asUInt64());
        }
    }
    if(pJson.isMember("UnitPrice"))
    {
        dirtyFlag_[8] = true;
        if(!pJson["UnitPrice"].isNull())
        {
            unitprice_=std::make_shared<std::string>(pJson["UnitPrice"].asString());
        }
    }
}

const uint64_t &Track::getValueOfTrackid() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(trackid_)
        return *trackid_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &Track::getTrackid() const noexcept
{
    return trackid_;
}
void Track::setTrackid(const uint64_t &pTrackid) noexcept
{
    trackid_ = std::make_shared<uint64_t>(pTrackid);
    dirtyFlag_[0] = true;
}
const typename Track::PrimaryKeyType & Track::getPrimaryKey() const
{
    assert(trackid_);
    return *trackid_;
}

const std::string &Track::getValueOfName() const noexcept
{
    const static std::string defaultValue = std::string();
    if(name_)
        return *name_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Track::getName() const noexcept
{
    return name_;
}
void Track::setName(const std::string &pName) noexcept
{
    name_ = std::make_shared<std::string>(pName);
    dirtyFlag_[1] = true;
}
void Track::setName(std::string &&pName) noexcept
{
    name_ = std::make_shared<std::string>(std::move(pName));
    dirtyFlag_[1] = true;
}

const uint64_t &Track::getValueOfAlbumid() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(albumid_)
        return *albumid_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &Track::getAlbumid() const noexcept
{
    return albumid_;
}
void Track::setAlbumid(const uint64_t &pAlbumid) noexcept
{
    albumid_ = std::make_shared<uint64_t>(pAlbumid);
    dirtyFlag_[2] = true;
}
void Track::setAlbumidToNull() noexcept
{
    albumid_.reset();
    dirtyFlag_[2] = true;
}

const uint64_t &Track::getValueOfMediatypeid() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(mediatypeid_)
        return *mediatypeid_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &Track::getMediatypeid() const noexcept
{
    return mediatypeid_;
}
void Track::setMediatypeid(const uint64_t &pMediatypeid) noexcept
{
    mediatypeid_ = std::make_shared<uint64_t>(pMediatypeid);
    dirtyFlag_[3] = true;
}

const uint64_t &Track::getValueOfGenreid() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(genreid_)
        return *genreid_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &Track::getGenreid() const noexcept
{
    return genreid_;
}
void Track::setGenreid(const uint64_t &pGenreid) noexcept
{
    genreid_ = std::make_shared<uint64_t>(pGenreid);
    dirtyFlag_[4] = true;
}
void Track::setGenreidToNull() noexcept
{
    genreid_.reset();
    dirtyFlag_[4] = true;
}

const std::string &Track::getValueOfComposer() const noexcept
{
    const static std::string defaultValue = std::string();
    if(composer_)
        return *composer_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Track::getComposer() const noexcept
{
    return composer_;
}
void Track::setComposer(const std::string &pComposer) noexcept
{
    composer_ = std::make_shared<std::string>(pComposer);
    dirtyFlag_[5] = true;
}
void Track::setComposer(std::string &&pComposer) noexcept
{
    composer_ = std::make_shared<std::string>(std::move(pComposer));
    dirtyFlag_[5] = true;
}
void Track::setComposerToNull() noexcept
{
    composer_.reset();
    dirtyFlag_[5] = true;
}

const uint64_t &Track::getValueOfMilliseconds() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(milliseconds_)
        return *milliseconds_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &Track::getMilliseconds() const noexcept
{
    return milliseconds_;
}
void Track::setMilliseconds(const uint64_t &pMilliseconds) noexcept
{
    milliseconds_ = std::make_shared<uint64_t>(pMilliseconds);
    dirtyFlag_[6] = true;
}

const uint64_t &Track::getValueOfBytes() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(bytes_)
        return *bytes_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &Track::getBytes() const noexcept
{
    return bytes_;
}
void Track::setBytes(const uint64_t &pBytes) noexcept
{
    bytes_ = std::make_shared<uint64_t>(pBytes);
    dirtyFlag_[7] = true;
}
void Track::setBytesToNull() noexcept
{
    bytes_.reset();
    dirtyFlag_[7] = true;
}

const std::string &Track::getValueOfUnitprice() const noexcept
{
    const static std::string defaultValue = std::string();
    if(unitprice_)
        return *unitprice_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Track::getUnitprice() const noexcept
{
    return unitprice_;
}
void Track::setUnitprice(const std::string &pUnitprice) noexcept
{
    unitprice_ = std::make_shared<std::string>(pUnitprice);
    dirtyFlag_[8] = true;
}
void Track::setUnitprice(std::string &&pUnitprice) noexcept
{
    unitprice_ = std::make_shared<std::string>(std::move(pUnitprice));
    dirtyFlag_[8] = true;
}

void Track::updateId(const uint64_t id)
{
    trackid_ = std::make_shared<uint64_t>(id);
}

const std::vector<std::string> &Track::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "Name",
        "AlbumId",
        "MediaTypeId",
        "GenreId",
        "Composer",
        "Milliseconds",
        "Bytes",
        "UnitPrice"
    };
    return inCols;
}

void Track::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getName())
        {
            binder << getValueOfName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getAlbumid())
        {
            binder << getValueOfAlbumid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getMediatypeid())
        {
            binder << getValueOfMediatypeid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getGenreid())
        {
            binder << getValueOfGenreid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getComposer())
        {
            binder << getValueOfComposer();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getMilliseconds())
        {
            binder << getValueOfMilliseconds();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getBytes())
        {
            binder << getValueOfBytes();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getUnitprice())
        {
            binder << getValueOfUnitprice();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Track::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    if(dirtyFlag_[7])
    {
        ret.push_back(getColumnName(7));
    }
    if(dirtyFlag_[8])
    {
        ret.push_back(getColumnName(8));
    }
    return ret;
}

void Track::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getName())
        {
            binder << getValueOfName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getAlbumid())
        {
            binder << getValueOfAlbumid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getMediatypeid())
        {
            binder << getValueOfMediatypeid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getGenreid())
        {
            binder << getValueOfGenreid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getComposer())
        {
            binder << getValueOfComposer();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getMilliseconds())
        {
            binder << getValueOfMilliseconds();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getBytes())
        {
            binder << getValueOfBytes();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getUnitprice())
        {
            binder << getValueOfUnitprice();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Track::toJson() const
{
    Json::Value ret;
    if(getTrackid())
    {
        ret["TrackId"]=(Json::UInt64)getValueOfTrackid();
    }
    else
    {
        ret["TrackId"]=Json::Value();
    }
    if(getName())
    {
        ret["Name"]=getValueOfName();
    }
    else
    {
        ret["Name"]=Json::Value();
    }
    if(getAlbumid())
    {
        ret["AlbumId"]=(Json::UInt64)getValueOfAlbumid();
    }
    else
    {
        ret["AlbumId"]=Json::Value();
    }
    if(getMediatypeid())
    {
        ret["MediaTypeId"]=(Json::UInt64)getValueOfMediatypeid();
    }
    else
    {
        ret["MediaTypeId"]=Json::Value();
    }
    if(getGenreid())
    {
        ret["GenreId"]=(Json::UInt64)getValueOfGenreid();
    }
    else
    {
        ret["GenreId"]=Json::Value();
    }
    if(getComposer())
    {
        ret["Composer"]=getValueOfComposer();
    }
    else
    {
        ret["Composer"]=Json::Value();
    }
    if(getMilliseconds())
    {
        ret["Milliseconds"]=(Json::UInt64)getValueOfMilliseconds();
    }
    else
    {
        ret["Milliseconds"]=Json::Value();
    }
    if(getBytes())
    {
        ret["Bytes"]=(Json::UInt64)getValueOfBytes();
    }
    else
    {
        ret["Bytes"]=Json::Value();
    }
    if(getUnitprice())
    {
        ret["UnitPrice"]=getValueOfUnitprice();
    }
    else
    {
        ret["UnitPrice"]=Json::Value();
    }
    return ret;
}

Json::Value Track::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 9)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getTrackid())
            {
                ret[pMasqueradingVector[0]]=(Json::UInt64)getValueOfTrackid();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getName())
            {
                ret[pMasqueradingVector[1]]=getValueOfName();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getAlbumid())
            {
                ret[pMasqueradingVector[2]]=(Json::UInt64)getValueOfAlbumid();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getMediatypeid())
            {
                ret[pMasqueradingVector[3]]=(Json::UInt64)getValueOfMediatypeid();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getGenreid())
            {
                ret[pMasqueradingVector[4]]=(Json::UInt64)getValueOfGenreid();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getComposer())
            {
                ret[pMasqueradingVector[5]]=getValueOfComposer();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getMilliseconds())
            {
                ret[pMasqueradingVector[6]]=(Json::UInt64)getValueOfMilliseconds();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getBytes())
            {
                ret[pMasqueradingVector[7]]=(Json::UInt64)getValueOfBytes();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[8].empty())
        {
            if(getUnitprice())
            {
                ret[pMasqueradingVector[8]]=getValueOfUnitprice();
            }
            else
            {
                ret[pMasqueradingVector[8]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getTrackid())
    {
        ret["TrackId"]=(Json::UInt64)getValueOfTrackid();
    }
    else
    {
        ret["TrackId"]=Json::Value();
    }
    if(getName())
    {
        ret["Name"]=getValueOfName();
    }
    else
    {
        ret["Name"]=Json::Value();
    }
    if(getAlbumid())
    {
        ret["AlbumId"]=(Json::UInt64)getValueOfAlbumid();
    }
    else
    {
        ret["AlbumId"]=Json::Value();
    }
    if(getMediatypeid())
    {
        ret["MediaTypeId"]=(Json::UInt64)getValueOfMediatypeid();
    }
    else
    {
        ret["MediaTypeId"]=Json::Value();
    }
    if(getGenreid())
    {
        ret["GenreId"]=(Json::UInt64)getValueOfGenreid();
    }
    else
    {
        ret["GenreId"]=Json::Value();
    }
    if(getComposer())
    {
        ret["Composer"]=getValueOfComposer();
    }
    else
    {
        ret["Composer"]=Json::Value();
    }
    if(getMilliseconds())
    {
        ret["Milliseconds"]=(Json::UInt64)getValueOfMilliseconds();
    }
    else
    {
        ret["Milliseconds"]=Json::Value();
    }
    if(getBytes())
    {
        ret["Bytes"]=(Json::UInt64)getValueOfBytes();
    }
    else
    {
        ret["Bytes"]=Json::Value();
    }
    if(getUnitprice())
    {
        ret["UnitPrice"]=getValueOfUnitprice();
    }
    else
    {
        ret["UnitPrice"]=Json::Value();
    }
    return ret;
}

bool Track::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("TrackId"))
    {
        if(!validJsonOfField(0, "TrackId", pJson["TrackId"], err, true))
            return false;
    }
    if(pJson.isMember("Name"))
    {
        if(!validJsonOfField(1, "Name", pJson["Name"], err, true))
            return false;
    }
    else
    {
        err="The Name column cannot be null";
        return false;
    }
    if(pJson.isMember("AlbumId"))
    {
        if(!validJsonOfField(2, "AlbumId", pJson["AlbumId"], err, true))
            return false;
    }
    if(pJson.isMember("MediaTypeId"))
    {
        if(!validJsonOfField(3, "MediaTypeId", pJson["MediaTypeId"], err, true))
            return false;
    }
    else
    {
        err="The MediaTypeId column cannot be null";
        return false;
    }
    if(pJson.isMember("GenreId"))
    {
        if(!validJsonOfField(4, "GenreId", pJson["GenreId"], err, true))
            return false;
    }
    if(pJson.isMember("Composer"))
    {
        if(!validJsonOfField(5, "Composer", pJson["Composer"], err, true))
            return false;
    }
    if(pJson.isMember("Milliseconds"))
    {
        if(!validJsonOfField(6, "Milliseconds", pJson["Milliseconds"], err, true))
            return false;
    }
    else
    {
        err="The Milliseconds column cannot be null";
        return false;
    }
    if(pJson.isMember("Bytes"))
    {
        if(!validJsonOfField(7, "Bytes", pJson["Bytes"], err, true))
            return false;
    }
    if(pJson.isMember("UnitPrice"))
    {
        if(!validJsonOfField(8, "UnitPrice", pJson["UnitPrice"], err, true))
            return false;
    }
    else
    {
        err="The UnitPrice column cannot be null";
        return false;
    }
    return true;
}
bool Track::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                               const std::vector<std::string> &pMasqueradingVector,
                                               std::string &err)
{
    if(pMasqueradingVector.size() != 9)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[3] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[6].empty())
      {
          if(pJson.isMember(pMasqueradingVector[6]))
          {
              if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[6] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[7].empty())
      {
          if(pJson.isMember(pMasqueradingVector[7]))
          {
              if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[8].empty())
      {
          if(pJson.isMember(pMasqueradingVector[8]))
          {
              if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[8] + " column cannot be null";
            return false;
        }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Track::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("TrackId"))
    {
        if(!validJsonOfField(0, "TrackId", pJson["TrackId"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("Name"))
    {
        if(!validJsonOfField(1, "Name", pJson["Name"], err, false))
            return false;
    }
    if(pJson.isMember("AlbumId"))
    {
        if(!validJsonOfField(2, "AlbumId", pJson["AlbumId"], err, false))
            return false;
    }
    if(pJson.isMember("MediaTypeId"))
    {
        if(!validJsonOfField(3, "MediaTypeId", pJson["MediaTypeId"], err, false))
            return false;
    }
    if(pJson.isMember("GenreId"))
    {
        if(!validJsonOfField(4, "GenreId", pJson["GenreId"], err, false))
            return false;
    }
    if(pJson.isMember("Composer"))
    {
        if(!validJsonOfField(5, "Composer", pJson["Composer"], err, false))
            return false;
    }
    if(pJson.isMember("Milliseconds"))
    {
        if(!validJsonOfField(6, "Milliseconds", pJson["Milliseconds"], err, false))
            return false;
    }
    if(pJson.isMember("Bytes"))
    {
        if(!validJsonOfField(7, "Bytes", pJson["Bytes"], err, false))
            return false;
    }
    if(pJson.isMember("UnitPrice"))
    {
        if(!validJsonOfField(8, "UnitPrice", pJson["UnitPrice"], err, false))
            return false;
    }
    return true;
}
bool Track::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                             const std::vector<std::string> &pMasqueradingVector,
                                             std::string &err)
{
    if(pMasqueradingVector.size() != 9)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
      if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
      {
          if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
              return false;
      }
      if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
      {
          if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
              return false;
      }
      if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
      {
          if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Track::validJsonOfField(size_t index,
                             const std::string &fieldName,
                             const Json::Value &pJson,
                             std::string &err,
                             bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 4:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 5:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 6:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 7:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 8:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
