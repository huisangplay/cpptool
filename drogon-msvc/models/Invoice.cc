/**
 *
 *  Invoice.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Invoice.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::sqlite3;

const std::string Invoice::Cols::_InvoiceId = "InvoiceId";
const std::string Invoice::Cols::_CustomerId = "CustomerId";
const std::string Invoice::Cols::_InvoiceDate = "InvoiceDate";
const std::string Invoice::Cols::_BillingAddress = "BillingAddress";
const std::string Invoice::Cols::_BillingCity = "BillingCity";
const std::string Invoice::Cols::_BillingState = "BillingState";
const std::string Invoice::Cols::_BillingCountry = "BillingCountry";
const std::string Invoice::Cols::_BillingPostalCode = "BillingPostalCode";
const std::string Invoice::Cols::_Total = "Total";
const std::string Invoice::primaryKeyName = "InvoiceId";
const bool Invoice::hasPrimaryKey = true;
const std::string Invoice::tableName = "invoice";

const std::vector<typename Invoice::MetaData> Invoice::metaData_={
{"InvoiceId","uint64_t","integer",8,1,1,1},
{"CustomerId","uint64_t","integer",8,0,0,1},
{"InvoiceDate","::trantor::Date","datetime",0,0,0,1},
{"BillingAddress","std::string","nvarchar(70)",0,0,0,0},
{"BillingCity","std::string","nvarchar(40)",0,0,0,0},
{"BillingState","std::string","nvarchar(40)",0,0,0,0},
{"BillingCountry","std::string","nvarchar(40)",0,0,0,0},
{"BillingPostalCode","std::string","nvarchar(10)",0,0,0,0},
{"Total","std::string","numeric(10,2)",0,0,0,1}
};
const std::string &Invoice::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Invoice::Invoice(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["InvoiceId"].isNull())
        {
            invoiceid_=std::make_shared<uint64_t>(r["InvoiceId"].as<uint64_t>());
        }
        if(!r["CustomerId"].isNull())
        {
            customerid_=std::make_shared<uint64_t>(r["CustomerId"].as<uint64_t>());
        }
        if(!r["InvoiceDate"].isNull())
        {
            auto timeStr = r["InvoiceDate"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                invoicedate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["BillingAddress"].isNull())
        {
            billingaddress_=std::make_shared<std::string>(r["BillingAddress"].as<std::string>());
        }
        if(!r["BillingCity"].isNull())
        {
            billingcity_=std::make_shared<std::string>(r["BillingCity"].as<std::string>());
        }
        if(!r["BillingState"].isNull())
        {
            billingstate_=std::make_shared<std::string>(r["BillingState"].as<std::string>());
        }
        if(!r["BillingCountry"].isNull())
        {
            billingcountry_=std::make_shared<std::string>(r["BillingCountry"].as<std::string>());
        }
        if(!r["BillingPostalCode"].isNull())
        {
            billingpostalcode_=std::make_shared<std::string>(r["BillingPostalCode"].as<std::string>());
        }
        if(!r["Total"].isNull())
        {
            total_=std::make_shared<std::string>(r["Total"].as<std::string>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 9 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            invoiceid_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            customerid_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                invoicedate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            billingaddress_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            billingcity_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            billingstate_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            billingcountry_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            billingpostalcode_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 8;
        if(!r[index].isNull())
        {
            total_=std::make_shared<std::string>(r[index].as<std::string>());
        }
    }

}

Invoice::Invoice(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 9)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            invoiceid_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            customerid_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[1]].asUInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[2]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                invoicedate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            billingaddress_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            billingcity_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            billingstate_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            billingcountry_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            billingpostalcode_=std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            total_=std::make_shared<std::string>(pJson[pMasqueradingVector[8]].asString());
        }
    }
}

Invoice::Invoice(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("InvoiceId"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["InvoiceId"].isNull())
        {
            invoiceid_=std::make_shared<uint64_t>((uint64_t)pJson["InvoiceId"].asUInt64());
        }
    }
    if(pJson.isMember("CustomerId"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["CustomerId"].isNull())
        {
            customerid_=std::make_shared<uint64_t>((uint64_t)pJson["CustomerId"].asUInt64());
        }
    }
    if(pJson.isMember("InvoiceDate"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["InvoiceDate"].isNull())
        {
            auto timeStr = pJson["InvoiceDate"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                invoicedate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("BillingAddress"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["BillingAddress"].isNull())
        {
            billingaddress_=std::make_shared<std::string>(pJson["BillingAddress"].asString());
        }
    }
    if(pJson.isMember("BillingCity"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["BillingCity"].isNull())
        {
            billingcity_=std::make_shared<std::string>(pJson["BillingCity"].asString());
        }
    }
    if(pJson.isMember("BillingState"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["BillingState"].isNull())
        {
            billingstate_=std::make_shared<std::string>(pJson["BillingState"].asString());
        }
    }
    if(pJson.isMember("BillingCountry"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["BillingCountry"].isNull())
        {
            billingcountry_=std::make_shared<std::string>(pJson["BillingCountry"].asString());
        }
    }
    if(pJson.isMember("BillingPostalCode"))
    {
        dirtyFlag_[7]=true;
        if(!pJson["BillingPostalCode"].isNull())
        {
            billingpostalcode_=std::make_shared<std::string>(pJson["BillingPostalCode"].asString());
        }
    }
    if(pJson.isMember("Total"))
    {
        dirtyFlag_[8]=true;
        if(!pJson["Total"].isNull())
        {
            total_=std::make_shared<std::string>(pJson["Total"].asString());
        }
    }
}

void Invoice::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 9)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            invoiceid_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            customerid_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[1]].asUInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[2]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                invoicedate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            billingaddress_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            billingcity_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            billingstate_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            billingcountry_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            billingpostalcode_=std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            total_=std::make_shared<std::string>(pJson[pMasqueradingVector[8]].asString());
        }
    }
}

void Invoice::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("InvoiceId"))
    {
        if(!pJson["InvoiceId"].isNull())
        {
            invoiceid_=std::make_shared<uint64_t>((uint64_t)pJson["InvoiceId"].asUInt64());
        }
    }
    if(pJson.isMember("CustomerId"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["CustomerId"].isNull())
        {
            customerid_=std::make_shared<uint64_t>((uint64_t)pJson["CustomerId"].asUInt64());
        }
    }
    if(pJson.isMember("InvoiceDate"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["InvoiceDate"].isNull())
        {
            auto timeStr = pJson["InvoiceDate"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                invoicedate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("BillingAddress"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["BillingAddress"].isNull())
        {
            billingaddress_=std::make_shared<std::string>(pJson["BillingAddress"].asString());
        }
    }
    if(pJson.isMember("BillingCity"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["BillingCity"].isNull())
        {
            billingcity_=std::make_shared<std::string>(pJson["BillingCity"].asString());
        }
    }
    if(pJson.isMember("BillingState"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["BillingState"].isNull())
        {
            billingstate_=std::make_shared<std::string>(pJson["BillingState"].asString());
        }
    }
    if(pJson.isMember("BillingCountry"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["BillingCountry"].isNull())
        {
            billingcountry_=std::make_shared<std::string>(pJson["BillingCountry"].asString());
        }
    }
    if(pJson.isMember("BillingPostalCode"))
    {
        dirtyFlag_[7] = true;
        if(!pJson["BillingPostalCode"].isNull())
        {
            billingpostalcode_=std::make_shared<std::string>(pJson["BillingPostalCode"].asString());
        }
    }
    if(pJson.isMember("Total"))
    {
        dirtyFlag_[8] = true;
        if(!pJson["Total"].isNull())
        {
            total_=std::make_shared<std::string>(pJson["Total"].asString());
        }
    }
}

const uint64_t &Invoice::getValueOfInvoiceid() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(invoiceid_)
        return *invoiceid_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &Invoice::getInvoiceid() const noexcept
{
    return invoiceid_;
}
void Invoice::setInvoiceid(const uint64_t &pInvoiceid) noexcept
{
    invoiceid_ = std::make_shared<uint64_t>(pInvoiceid);
    dirtyFlag_[0] = true;
}
const typename Invoice::PrimaryKeyType & Invoice::getPrimaryKey() const
{
    assert(invoiceid_);
    return *invoiceid_;
}

const uint64_t &Invoice::getValueOfCustomerid() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(customerid_)
        return *customerid_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &Invoice::getCustomerid() const noexcept
{
    return customerid_;
}
void Invoice::setCustomerid(const uint64_t &pCustomerid) noexcept
{
    customerid_ = std::make_shared<uint64_t>(pCustomerid);
    dirtyFlag_[1] = true;
}

const ::trantor::Date &Invoice::getValueOfInvoicedate() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(invoicedate_)
        return *invoicedate_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Invoice::getInvoicedate() const noexcept
{
    return invoicedate_;
}
void Invoice::setInvoicedate(const ::trantor::Date &pInvoicedate) noexcept
{
    invoicedate_ = std::make_shared<::trantor::Date>(pInvoicedate);
    dirtyFlag_[2] = true;
}

const std::string &Invoice::getValueOfBillingaddress() const noexcept
{
    const static std::string defaultValue = std::string();
    if(billingaddress_)
        return *billingaddress_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Invoice::getBillingaddress() const noexcept
{
    return billingaddress_;
}
void Invoice::setBillingaddress(const std::string &pBillingaddress) noexcept
{
    billingaddress_ = std::make_shared<std::string>(pBillingaddress);
    dirtyFlag_[3] = true;
}
void Invoice::setBillingaddress(std::string &&pBillingaddress) noexcept
{
    billingaddress_ = std::make_shared<std::string>(std::move(pBillingaddress));
    dirtyFlag_[3] = true;
}
void Invoice::setBillingaddressToNull() noexcept
{
    billingaddress_.reset();
    dirtyFlag_[3] = true;
}

const std::string &Invoice::getValueOfBillingcity() const noexcept
{
    const static std::string defaultValue = std::string();
    if(billingcity_)
        return *billingcity_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Invoice::getBillingcity() const noexcept
{
    return billingcity_;
}
void Invoice::setBillingcity(const std::string &pBillingcity) noexcept
{
    billingcity_ = std::make_shared<std::string>(pBillingcity);
    dirtyFlag_[4] = true;
}
void Invoice::setBillingcity(std::string &&pBillingcity) noexcept
{
    billingcity_ = std::make_shared<std::string>(std::move(pBillingcity));
    dirtyFlag_[4] = true;
}
void Invoice::setBillingcityToNull() noexcept
{
    billingcity_.reset();
    dirtyFlag_[4] = true;
}

const std::string &Invoice::getValueOfBillingstate() const noexcept
{
    const static std::string defaultValue = std::string();
    if(billingstate_)
        return *billingstate_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Invoice::getBillingstate() const noexcept
{
    return billingstate_;
}
void Invoice::setBillingstate(const std::string &pBillingstate) noexcept
{
    billingstate_ = std::make_shared<std::string>(pBillingstate);
    dirtyFlag_[5] = true;
}
void Invoice::setBillingstate(std::string &&pBillingstate) noexcept
{
    billingstate_ = std::make_shared<std::string>(std::move(pBillingstate));
    dirtyFlag_[5] = true;
}
void Invoice::setBillingstateToNull() noexcept
{
    billingstate_.reset();
    dirtyFlag_[5] = true;
}

const std::string &Invoice::getValueOfBillingcountry() const noexcept
{
    const static std::string defaultValue = std::string();
    if(billingcountry_)
        return *billingcountry_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Invoice::getBillingcountry() const noexcept
{
    return billingcountry_;
}
void Invoice::setBillingcountry(const std::string &pBillingcountry) noexcept
{
    billingcountry_ = std::make_shared<std::string>(pBillingcountry);
    dirtyFlag_[6] = true;
}
void Invoice::setBillingcountry(std::string &&pBillingcountry) noexcept
{
    billingcountry_ = std::make_shared<std::string>(std::move(pBillingcountry));
    dirtyFlag_[6] = true;
}
void Invoice::setBillingcountryToNull() noexcept
{
    billingcountry_.reset();
    dirtyFlag_[6] = true;
}

const std::string &Invoice::getValueOfBillingpostalcode() const noexcept
{
    const static std::string defaultValue = std::string();
    if(billingpostalcode_)
        return *billingpostalcode_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Invoice::getBillingpostalcode() const noexcept
{
    return billingpostalcode_;
}
void Invoice::setBillingpostalcode(const std::string &pBillingpostalcode) noexcept
{
    billingpostalcode_ = std::make_shared<std::string>(pBillingpostalcode);
    dirtyFlag_[7] = true;
}
void Invoice::setBillingpostalcode(std::string &&pBillingpostalcode) noexcept
{
    billingpostalcode_ = std::make_shared<std::string>(std::move(pBillingpostalcode));
    dirtyFlag_[7] = true;
}
void Invoice::setBillingpostalcodeToNull() noexcept
{
    billingpostalcode_.reset();
    dirtyFlag_[7] = true;
}

const std::string &Invoice::getValueOfTotal() const noexcept
{
    const static std::string defaultValue = std::string();
    if(total_)
        return *total_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Invoice::getTotal() const noexcept
{
    return total_;
}
void Invoice::setTotal(const std::string &pTotal) noexcept
{
    total_ = std::make_shared<std::string>(pTotal);
    dirtyFlag_[8] = true;
}
void Invoice::setTotal(std::string &&pTotal) noexcept
{
    total_ = std::make_shared<std::string>(std::move(pTotal));
    dirtyFlag_[8] = true;
}

void Invoice::updateId(const uint64_t id)
{
    invoiceid_ = std::make_shared<uint64_t>(id);
}

const std::vector<std::string> &Invoice::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "CustomerId",
        "InvoiceDate",
        "BillingAddress",
        "BillingCity",
        "BillingState",
        "BillingCountry",
        "BillingPostalCode",
        "Total"
    };
    return inCols;
}

void Invoice::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getCustomerid())
        {
            binder << getValueOfCustomerid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getInvoicedate())
        {
            binder << getValueOfInvoicedate();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getBillingaddress())
        {
            binder << getValueOfBillingaddress();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getBillingcity())
        {
            binder << getValueOfBillingcity();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getBillingstate())
        {
            binder << getValueOfBillingstate();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getBillingcountry())
        {
            binder << getValueOfBillingcountry();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getBillingpostalcode())
        {
            binder << getValueOfBillingpostalcode();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getTotal())
        {
            binder << getValueOfTotal();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Invoice::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    if(dirtyFlag_[7])
    {
        ret.push_back(getColumnName(7));
    }
    if(dirtyFlag_[8])
    {
        ret.push_back(getColumnName(8));
    }
    return ret;
}

void Invoice::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getCustomerid())
        {
            binder << getValueOfCustomerid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getInvoicedate())
        {
            binder << getValueOfInvoicedate();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getBillingaddress())
        {
            binder << getValueOfBillingaddress();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getBillingcity())
        {
            binder << getValueOfBillingcity();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getBillingstate())
        {
            binder << getValueOfBillingstate();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getBillingcountry())
        {
            binder << getValueOfBillingcountry();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getBillingpostalcode())
        {
            binder << getValueOfBillingpostalcode();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getTotal())
        {
            binder << getValueOfTotal();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Invoice::toJson() const
{
    Json::Value ret;
    if(getInvoiceid())
    {
        ret["InvoiceId"]=(Json::UInt64)getValueOfInvoiceid();
    }
    else
    {
        ret["InvoiceId"]=Json::Value();
    }
    if(getCustomerid())
    {
        ret["CustomerId"]=(Json::UInt64)getValueOfCustomerid();
    }
    else
    {
        ret["CustomerId"]=Json::Value();
    }
    if(getInvoicedate())
    {
        ret["InvoiceDate"]=getInvoicedate()->toDbStringLocal();
    }
    else
    {
        ret["InvoiceDate"]=Json::Value();
    }
    if(getBillingaddress())
    {
        ret["BillingAddress"]=getValueOfBillingaddress();
    }
    else
    {
        ret["BillingAddress"]=Json::Value();
    }
    if(getBillingcity())
    {
        ret["BillingCity"]=getValueOfBillingcity();
    }
    else
    {
        ret["BillingCity"]=Json::Value();
    }
    if(getBillingstate())
    {
        ret["BillingState"]=getValueOfBillingstate();
    }
    else
    {
        ret["BillingState"]=Json::Value();
    }
    if(getBillingcountry())
    {
        ret["BillingCountry"]=getValueOfBillingcountry();
    }
    else
    {
        ret["BillingCountry"]=Json::Value();
    }
    if(getBillingpostalcode())
    {
        ret["BillingPostalCode"]=getValueOfBillingpostalcode();
    }
    else
    {
        ret["BillingPostalCode"]=Json::Value();
    }
    if(getTotal())
    {
        ret["Total"]=getValueOfTotal();
    }
    else
    {
        ret["Total"]=Json::Value();
    }
    return ret;
}

Json::Value Invoice::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 9)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getInvoiceid())
            {
                ret[pMasqueradingVector[0]]=(Json::UInt64)getValueOfInvoiceid();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getCustomerid())
            {
                ret[pMasqueradingVector[1]]=(Json::UInt64)getValueOfCustomerid();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getInvoicedate())
            {
                ret[pMasqueradingVector[2]]=getInvoicedate()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getBillingaddress())
            {
                ret[pMasqueradingVector[3]]=getValueOfBillingaddress();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getBillingcity())
            {
                ret[pMasqueradingVector[4]]=getValueOfBillingcity();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getBillingstate())
            {
                ret[pMasqueradingVector[5]]=getValueOfBillingstate();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getBillingcountry())
            {
                ret[pMasqueradingVector[6]]=getValueOfBillingcountry();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getBillingpostalcode())
            {
                ret[pMasqueradingVector[7]]=getValueOfBillingpostalcode();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[8].empty())
        {
            if(getTotal())
            {
                ret[pMasqueradingVector[8]]=getValueOfTotal();
            }
            else
            {
                ret[pMasqueradingVector[8]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getInvoiceid())
    {
        ret["InvoiceId"]=(Json::UInt64)getValueOfInvoiceid();
    }
    else
    {
        ret["InvoiceId"]=Json::Value();
    }
    if(getCustomerid())
    {
        ret["CustomerId"]=(Json::UInt64)getValueOfCustomerid();
    }
    else
    {
        ret["CustomerId"]=Json::Value();
    }
    if(getInvoicedate())
    {
        ret["InvoiceDate"]=getInvoicedate()->toDbStringLocal();
    }
    else
    {
        ret["InvoiceDate"]=Json::Value();
    }
    if(getBillingaddress())
    {
        ret["BillingAddress"]=getValueOfBillingaddress();
    }
    else
    {
        ret["BillingAddress"]=Json::Value();
    }
    if(getBillingcity())
    {
        ret["BillingCity"]=getValueOfBillingcity();
    }
    else
    {
        ret["BillingCity"]=Json::Value();
    }
    if(getBillingstate())
    {
        ret["BillingState"]=getValueOfBillingstate();
    }
    else
    {
        ret["BillingState"]=Json::Value();
    }
    if(getBillingcountry())
    {
        ret["BillingCountry"]=getValueOfBillingcountry();
    }
    else
    {
        ret["BillingCountry"]=Json::Value();
    }
    if(getBillingpostalcode())
    {
        ret["BillingPostalCode"]=getValueOfBillingpostalcode();
    }
    else
    {
        ret["BillingPostalCode"]=Json::Value();
    }
    if(getTotal())
    {
        ret["Total"]=getValueOfTotal();
    }
    else
    {
        ret["Total"]=Json::Value();
    }
    return ret;
}

bool Invoice::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("InvoiceId"))
    {
        if(!validJsonOfField(0, "InvoiceId", pJson["InvoiceId"], err, true))
            return false;
    }
    if(pJson.isMember("CustomerId"))
    {
        if(!validJsonOfField(1, "CustomerId", pJson["CustomerId"], err, true))
            return false;
    }
    else
    {
        err="The CustomerId column cannot be null";
        return false;
    }
    if(pJson.isMember("InvoiceDate"))
    {
        if(!validJsonOfField(2, "InvoiceDate", pJson["InvoiceDate"], err, true))
            return false;
    }
    else
    {
        err="The InvoiceDate column cannot be null";
        return false;
    }
    if(pJson.isMember("BillingAddress"))
    {
        if(!validJsonOfField(3, "BillingAddress", pJson["BillingAddress"], err, true))
            return false;
    }
    if(pJson.isMember("BillingCity"))
    {
        if(!validJsonOfField(4, "BillingCity", pJson["BillingCity"], err, true))
            return false;
    }
    if(pJson.isMember("BillingState"))
    {
        if(!validJsonOfField(5, "BillingState", pJson["BillingState"], err, true))
            return false;
    }
    if(pJson.isMember("BillingCountry"))
    {
        if(!validJsonOfField(6, "BillingCountry", pJson["BillingCountry"], err, true))
            return false;
    }
    if(pJson.isMember("BillingPostalCode"))
    {
        if(!validJsonOfField(7, "BillingPostalCode", pJson["BillingPostalCode"], err, true))
            return false;
    }
    if(pJson.isMember("Total"))
    {
        if(!validJsonOfField(8, "Total", pJson["Total"], err, true))
            return false;
    }
    else
    {
        err="The Total column cannot be null";
        return false;
    }
    return true;
}
bool Invoice::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                 const std::vector<std::string> &pMasqueradingVector,
                                                 std::string &err)
{
    if(pMasqueradingVector.size() != 9)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[2] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[6].empty())
      {
          if(pJson.isMember(pMasqueradingVector[6]))
          {
              if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[7].empty())
      {
          if(pJson.isMember(pMasqueradingVector[7]))
          {
              if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[8].empty())
      {
          if(pJson.isMember(pMasqueradingVector[8]))
          {
              if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[8] + " column cannot be null";
            return false;
        }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Invoice::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("InvoiceId"))
    {
        if(!validJsonOfField(0, "InvoiceId", pJson["InvoiceId"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("CustomerId"))
    {
        if(!validJsonOfField(1, "CustomerId", pJson["CustomerId"], err, false))
            return false;
    }
    if(pJson.isMember("InvoiceDate"))
    {
        if(!validJsonOfField(2, "InvoiceDate", pJson["InvoiceDate"], err, false))
            return false;
    }
    if(pJson.isMember("BillingAddress"))
    {
        if(!validJsonOfField(3, "BillingAddress", pJson["BillingAddress"], err, false))
            return false;
    }
    if(pJson.isMember("BillingCity"))
    {
        if(!validJsonOfField(4, "BillingCity", pJson["BillingCity"], err, false))
            return false;
    }
    if(pJson.isMember("BillingState"))
    {
        if(!validJsonOfField(5, "BillingState", pJson["BillingState"], err, false))
            return false;
    }
    if(pJson.isMember("BillingCountry"))
    {
        if(!validJsonOfField(6, "BillingCountry", pJson["BillingCountry"], err, false))
            return false;
    }
    if(pJson.isMember("BillingPostalCode"))
    {
        if(!validJsonOfField(7, "BillingPostalCode", pJson["BillingPostalCode"], err, false))
            return false;
    }
    if(pJson.isMember("Total"))
    {
        if(!validJsonOfField(8, "Total", pJson["Total"], err, false))
            return false;
    }
    return true;
}
bool Invoice::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                               const std::vector<std::string> &pMasqueradingVector,
                                               std::string &err)
{
    if(pMasqueradingVector.size() != 9)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
      if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
      {
          if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
              return false;
      }
      if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
      {
          if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
              return false;
      }
      if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
      {
          if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Invoice::validJsonOfField(size_t index,
                               const std::string &fieldName,
                               const Json::Value &pJson,
                               std::string &err,
                               bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 4:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 5:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 6:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 7:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 8:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
