/**
 *
 *  Employee.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Employee.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::sqlite3;

const std::string Employee::Cols::_EmployeeId = "EmployeeId";
const std::string Employee::Cols::_LastName = "LastName";
const std::string Employee::Cols::_FirstName = "FirstName";
const std::string Employee::Cols::_Title = "Title";
const std::string Employee::Cols::_ReportsTo = "ReportsTo";
const std::string Employee::Cols::_BirthDate = "BirthDate";
const std::string Employee::Cols::_HireDate = "HireDate";
const std::string Employee::Cols::_Address = "Address";
const std::string Employee::Cols::_City = "City";
const std::string Employee::Cols::_State = "State";
const std::string Employee::Cols::_Country = "Country";
const std::string Employee::Cols::_PostalCode = "PostalCode";
const std::string Employee::Cols::_Phone = "Phone";
const std::string Employee::Cols::_Fax = "Fax";
const std::string Employee::Cols::_Email = "Email";
const std::string Employee::primaryKeyName = "EmployeeId";
const bool Employee::hasPrimaryKey = true;
const std::string Employee::tableName = "employee";

const std::vector<typename Employee::MetaData> Employee::metaData_={
{"EmployeeId","uint64_t","integer",8,1,1,1},
{"LastName","std::string","nvarchar(20)",0,0,0,1},
{"FirstName","std::string","nvarchar(20)",0,0,0,1},
{"Title","std::string","nvarchar(30)",0,0,0,0},
{"ReportsTo","uint64_t","integer",8,0,0,0},
{"BirthDate","::trantor::Date","datetime",0,0,0,0},
{"HireDate","::trantor::Date","datetime",0,0,0,0},
{"Address","std::string","nvarchar(70)",0,0,0,0},
{"City","std::string","nvarchar(40)",0,0,0,0},
{"State","std::string","nvarchar(40)",0,0,0,0},
{"Country","std::string","nvarchar(40)",0,0,0,0},
{"PostalCode","std::string","nvarchar(10)",0,0,0,0},
{"Phone","std::string","nvarchar(24)",0,0,0,0},
{"Fax","std::string","nvarchar(24)",0,0,0,0},
{"Email","std::string","nvarchar(60)",0,0,0,0}
};
const std::string &Employee::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Employee::Employee(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["EmployeeId"].isNull())
        {
            employeeid_=std::make_shared<uint64_t>(r["EmployeeId"].as<uint64_t>());
        }
        if(!r["LastName"].isNull())
        {
            lastname_=std::make_shared<std::string>(r["LastName"].as<std::string>());
        }
        if(!r["FirstName"].isNull())
        {
            firstname_=std::make_shared<std::string>(r["FirstName"].as<std::string>());
        }
        if(!r["Title"].isNull())
        {
            title_=std::make_shared<std::string>(r["Title"].as<std::string>());
        }
        if(!r["ReportsTo"].isNull())
        {
            reportsto_=std::make_shared<uint64_t>(r["ReportsTo"].as<uint64_t>());
        }
        if(!r["BirthDate"].isNull())
        {
            auto timeStr = r["BirthDate"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                birthdate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["HireDate"].isNull())
        {
            auto timeStr = r["HireDate"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                hiredate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["Address"].isNull())
        {
            address_=std::make_shared<std::string>(r["Address"].as<std::string>());
        }
        if(!r["City"].isNull())
        {
            city_=std::make_shared<std::string>(r["City"].as<std::string>());
        }
        if(!r["State"].isNull())
        {
            state_=std::make_shared<std::string>(r["State"].as<std::string>());
        }
        if(!r["Country"].isNull())
        {
            country_=std::make_shared<std::string>(r["Country"].as<std::string>());
        }
        if(!r["PostalCode"].isNull())
        {
            postalcode_=std::make_shared<std::string>(r["PostalCode"].as<std::string>());
        }
        if(!r["Phone"].isNull())
        {
            phone_=std::make_shared<std::string>(r["Phone"].as<std::string>());
        }
        if(!r["Fax"].isNull())
        {
            fax_=std::make_shared<std::string>(r["Fax"].as<std::string>());
        }
        if(!r["Email"].isNull())
        {
            email_=std::make_shared<std::string>(r["Email"].as<std::string>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 15 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            employeeid_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            lastname_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            firstname_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            title_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            reportsto_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                birthdate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                hiredate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            address_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 8;
        if(!r[index].isNull())
        {
            city_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 9;
        if(!r[index].isNull())
        {
            state_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 10;
        if(!r[index].isNull())
        {
            country_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 11;
        if(!r[index].isNull())
        {
            postalcode_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 12;
        if(!r[index].isNull())
        {
            phone_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 13;
        if(!r[index].isNull())
        {
            fax_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 14;
        if(!r[index].isNull())
        {
            email_=std::make_shared<std::string>(r[index].as<std::string>());
        }
    }

}

Employee::Employee(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 15)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            employeeid_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            lastname_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            firstname_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            title_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            reportsto_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[4]].asUInt64());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[5]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                birthdate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[6]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                hiredate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            address_=std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            city_=std::make_shared<std::string>(pJson[pMasqueradingVector[8]].asString());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            state_=std::make_shared<std::string>(pJson[pMasqueradingVector[9]].asString());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            country_=std::make_shared<std::string>(pJson[pMasqueradingVector[10]].asString());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            postalcode_=std::make_shared<std::string>(pJson[pMasqueradingVector[11]].asString());
        }
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        dirtyFlag_[12] = true;
        if(!pJson[pMasqueradingVector[12]].isNull())
        {
            phone_=std::make_shared<std::string>(pJson[pMasqueradingVector[12]].asString());
        }
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        dirtyFlag_[13] = true;
        if(!pJson[pMasqueradingVector[13]].isNull())
        {
            fax_=std::make_shared<std::string>(pJson[pMasqueradingVector[13]].asString());
        }
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        dirtyFlag_[14] = true;
        if(!pJson[pMasqueradingVector[14]].isNull())
        {
            email_=std::make_shared<std::string>(pJson[pMasqueradingVector[14]].asString());
        }
    }
}

Employee::Employee(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("EmployeeId"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["EmployeeId"].isNull())
        {
            employeeid_=std::make_shared<uint64_t>((uint64_t)pJson["EmployeeId"].asUInt64());
        }
    }
    if(pJson.isMember("LastName"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["LastName"].isNull())
        {
            lastname_=std::make_shared<std::string>(pJson["LastName"].asString());
        }
    }
    if(pJson.isMember("FirstName"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["FirstName"].isNull())
        {
            firstname_=std::make_shared<std::string>(pJson["FirstName"].asString());
        }
    }
    if(pJson.isMember("Title"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["Title"].isNull())
        {
            title_=std::make_shared<std::string>(pJson["Title"].asString());
        }
    }
    if(pJson.isMember("ReportsTo"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["ReportsTo"].isNull())
        {
            reportsto_=std::make_shared<uint64_t>((uint64_t)pJson["ReportsTo"].asUInt64());
        }
    }
    if(pJson.isMember("BirthDate"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["BirthDate"].isNull())
        {
            auto timeStr = pJson["BirthDate"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                birthdate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("HireDate"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["HireDate"].isNull())
        {
            auto timeStr = pJson["HireDate"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                hiredate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("Address"))
    {
        dirtyFlag_[7]=true;
        if(!pJson["Address"].isNull())
        {
            address_=std::make_shared<std::string>(pJson["Address"].asString());
        }
    }
    if(pJson.isMember("City"))
    {
        dirtyFlag_[8]=true;
        if(!pJson["City"].isNull())
        {
            city_=std::make_shared<std::string>(pJson["City"].asString());
        }
    }
    if(pJson.isMember("State"))
    {
        dirtyFlag_[9]=true;
        if(!pJson["State"].isNull())
        {
            state_=std::make_shared<std::string>(pJson["State"].asString());
        }
    }
    if(pJson.isMember("Country"))
    {
        dirtyFlag_[10]=true;
        if(!pJson["Country"].isNull())
        {
            country_=std::make_shared<std::string>(pJson["Country"].asString());
        }
    }
    if(pJson.isMember("PostalCode"))
    {
        dirtyFlag_[11]=true;
        if(!pJson["PostalCode"].isNull())
        {
            postalcode_=std::make_shared<std::string>(pJson["PostalCode"].asString());
        }
    }
    if(pJson.isMember("Phone"))
    {
        dirtyFlag_[12]=true;
        if(!pJson["Phone"].isNull())
        {
            phone_=std::make_shared<std::string>(pJson["Phone"].asString());
        }
    }
    if(pJson.isMember("Fax"))
    {
        dirtyFlag_[13]=true;
        if(!pJson["Fax"].isNull())
        {
            fax_=std::make_shared<std::string>(pJson["Fax"].asString());
        }
    }
    if(pJson.isMember("Email"))
    {
        dirtyFlag_[14]=true;
        if(!pJson["Email"].isNull())
        {
            email_=std::make_shared<std::string>(pJson["Email"].asString());
        }
    }
}

void Employee::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 15)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            employeeid_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            lastname_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            firstname_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            title_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            reportsto_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[4]].asUInt64());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[5]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                birthdate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[6]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                hiredate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            address_=std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            city_=std::make_shared<std::string>(pJson[pMasqueradingVector[8]].asString());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            state_=std::make_shared<std::string>(pJson[pMasqueradingVector[9]].asString());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            country_=std::make_shared<std::string>(pJson[pMasqueradingVector[10]].asString());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            postalcode_=std::make_shared<std::string>(pJson[pMasqueradingVector[11]].asString());
        }
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        dirtyFlag_[12] = true;
        if(!pJson[pMasqueradingVector[12]].isNull())
        {
            phone_=std::make_shared<std::string>(pJson[pMasqueradingVector[12]].asString());
        }
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        dirtyFlag_[13] = true;
        if(!pJson[pMasqueradingVector[13]].isNull())
        {
            fax_=std::make_shared<std::string>(pJson[pMasqueradingVector[13]].asString());
        }
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        dirtyFlag_[14] = true;
        if(!pJson[pMasqueradingVector[14]].isNull())
        {
            email_=std::make_shared<std::string>(pJson[pMasqueradingVector[14]].asString());
        }
    }
}

void Employee::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("EmployeeId"))
    {
        if(!pJson["EmployeeId"].isNull())
        {
            employeeid_=std::make_shared<uint64_t>((uint64_t)pJson["EmployeeId"].asUInt64());
        }
    }
    if(pJson.isMember("LastName"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["LastName"].isNull())
        {
            lastname_=std::make_shared<std::string>(pJson["LastName"].asString());
        }
    }
    if(pJson.isMember("FirstName"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["FirstName"].isNull())
        {
            firstname_=std::make_shared<std::string>(pJson["FirstName"].asString());
        }
    }
    if(pJson.isMember("Title"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["Title"].isNull())
        {
            title_=std::make_shared<std::string>(pJson["Title"].asString());
        }
    }
    if(pJson.isMember("ReportsTo"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["ReportsTo"].isNull())
        {
            reportsto_=std::make_shared<uint64_t>((uint64_t)pJson["ReportsTo"].asUInt64());
        }
    }
    if(pJson.isMember("BirthDate"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["BirthDate"].isNull())
        {
            auto timeStr = pJson["BirthDate"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                birthdate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("HireDate"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["HireDate"].isNull())
        {
            auto timeStr = pJson["HireDate"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                hiredate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("Address"))
    {
        dirtyFlag_[7] = true;
        if(!pJson["Address"].isNull())
        {
            address_=std::make_shared<std::string>(pJson["Address"].asString());
        }
    }
    if(pJson.isMember("City"))
    {
        dirtyFlag_[8] = true;
        if(!pJson["City"].isNull())
        {
            city_=std::make_shared<std::string>(pJson["City"].asString());
        }
    }
    if(pJson.isMember("State"))
    {
        dirtyFlag_[9] = true;
        if(!pJson["State"].isNull())
        {
            state_=std::make_shared<std::string>(pJson["State"].asString());
        }
    }
    if(pJson.isMember("Country"))
    {
        dirtyFlag_[10] = true;
        if(!pJson["Country"].isNull())
        {
            country_=std::make_shared<std::string>(pJson["Country"].asString());
        }
    }
    if(pJson.isMember("PostalCode"))
    {
        dirtyFlag_[11] = true;
        if(!pJson["PostalCode"].isNull())
        {
            postalcode_=std::make_shared<std::string>(pJson["PostalCode"].asString());
        }
    }
    if(pJson.isMember("Phone"))
    {
        dirtyFlag_[12] = true;
        if(!pJson["Phone"].isNull())
        {
            phone_=std::make_shared<std::string>(pJson["Phone"].asString());
        }
    }
    if(pJson.isMember("Fax"))
    {
        dirtyFlag_[13] = true;
        if(!pJson["Fax"].isNull())
        {
            fax_=std::make_shared<std::string>(pJson["Fax"].asString());
        }
    }
    if(pJson.isMember("Email"))
    {
        dirtyFlag_[14] = true;
        if(!pJson["Email"].isNull())
        {
            email_=std::make_shared<std::string>(pJson["Email"].asString());
        }
    }
}

const uint64_t &Employee::getValueOfEmployeeid() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(employeeid_)
        return *employeeid_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &Employee::getEmployeeid() const noexcept
{
    return employeeid_;
}
void Employee::setEmployeeid(const uint64_t &pEmployeeid) noexcept
{
    employeeid_ = std::make_shared<uint64_t>(pEmployeeid);
    dirtyFlag_[0] = true;
}
const typename Employee::PrimaryKeyType & Employee::getPrimaryKey() const
{
    assert(employeeid_);
    return *employeeid_;
}

const std::string &Employee::getValueOfLastname() const noexcept
{
    const static std::string defaultValue = std::string();
    if(lastname_)
        return *lastname_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Employee::getLastname() const noexcept
{
    return lastname_;
}
void Employee::setLastname(const std::string &pLastname) noexcept
{
    lastname_ = std::make_shared<std::string>(pLastname);
    dirtyFlag_[1] = true;
}
void Employee::setLastname(std::string &&pLastname) noexcept
{
    lastname_ = std::make_shared<std::string>(std::move(pLastname));
    dirtyFlag_[1] = true;
}

const std::string &Employee::getValueOfFirstname() const noexcept
{
    const static std::string defaultValue = std::string();
    if(firstname_)
        return *firstname_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Employee::getFirstname() const noexcept
{
    return firstname_;
}
void Employee::setFirstname(const std::string &pFirstname) noexcept
{
    firstname_ = std::make_shared<std::string>(pFirstname);
    dirtyFlag_[2] = true;
}
void Employee::setFirstname(std::string &&pFirstname) noexcept
{
    firstname_ = std::make_shared<std::string>(std::move(pFirstname));
    dirtyFlag_[2] = true;
}

const std::string &Employee::getValueOfTitle() const noexcept
{
    const static std::string defaultValue = std::string();
    if(title_)
        return *title_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Employee::getTitle() const noexcept
{
    return title_;
}
void Employee::setTitle(const std::string &pTitle) noexcept
{
    title_ = std::make_shared<std::string>(pTitle);
    dirtyFlag_[3] = true;
}
void Employee::setTitle(std::string &&pTitle) noexcept
{
    title_ = std::make_shared<std::string>(std::move(pTitle));
    dirtyFlag_[3] = true;
}
void Employee::setTitleToNull() noexcept
{
    title_.reset();
    dirtyFlag_[3] = true;
}

const uint64_t &Employee::getValueOfReportsto() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(reportsto_)
        return *reportsto_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &Employee::getReportsto() const noexcept
{
    return reportsto_;
}
void Employee::setReportsto(const uint64_t &pReportsto) noexcept
{
    reportsto_ = std::make_shared<uint64_t>(pReportsto);
    dirtyFlag_[4] = true;
}
void Employee::setReportstoToNull() noexcept
{
    reportsto_.reset();
    dirtyFlag_[4] = true;
}

const ::trantor::Date &Employee::getValueOfBirthdate() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(birthdate_)
        return *birthdate_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Employee::getBirthdate() const noexcept
{
    return birthdate_;
}
void Employee::setBirthdate(const ::trantor::Date &pBirthdate) noexcept
{
    birthdate_ = std::make_shared<::trantor::Date>(pBirthdate);
    dirtyFlag_[5] = true;
}
void Employee::setBirthdateToNull() noexcept
{
    birthdate_.reset();
    dirtyFlag_[5] = true;
}

const ::trantor::Date &Employee::getValueOfHiredate() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(hiredate_)
        return *hiredate_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Employee::getHiredate() const noexcept
{
    return hiredate_;
}
void Employee::setHiredate(const ::trantor::Date &pHiredate) noexcept
{
    hiredate_ = std::make_shared<::trantor::Date>(pHiredate);
    dirtyFlag_[6] = true;
}
void Employee::setHiredateToNull() noexcept
{
    hiredate_.reset();
    dirtyFlag_[6] = true;
}

const std::string &Employee::getValueOfAddress() const noexcept
{
    const static std::string defaultValue = std::string();
    if(address_)
        return *address_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Employee::getAddress() const noexcept
{
    return address_;
}
void Employee::setAddress(const std::string &pAddress) noexcept
{
    address_ = std::make_shared<std::string>(pAddress);
    dirtyFlag_[7] = true;
}
void Employee::setAddress(std::string &&pAddress) noexcept
{
    address_ = std::make_shared<std::string>(std::move(pAddress));
    dirtyFlag_[7] = true;
}
void Employee::setAddressToNull() noexcept
{
    address_.reset();
    dirtyFlag_[7] = true;
}

const std::string &Employee::getValueOfCity() const noexcept
{
    const static std::string defaultValue = std::string();
    if(city_)
        return *city_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Employee::getCity() const noexcept
{
    return city_;
}
void Employee::setCity(const std::string &pCity) noexcept
{
    city_ = std::make_shared<std::string>(pCity);
    dirtyFlag_[8] = true;
}
void Employee::setCity(std::string &&pCity) noexcept
{
    city_ = std::make_shared<std::string>(std::move(pCity));
    dirtyFlag_[8] = true;
}
void Employee::setCityToNull() noexcept
{
    city_.reset();
    dirtyFlag_[8] = true;
}

const std::string &Employee::getValueOfState() const noexcept
{
    const static std::string defaultValue = std::string();
    if(state_)
        return *state_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Employee::getState() const noexcept
{
    return state_;
}
void Employee::setState(const std::string &pState) noexcept
{
    state_ = std::make_shared<std::string>(pState);
    dirtyFlag_[9] = true;
}
void Employee::setState(std::string &&pState) noexcept
{
    state_ = std::make_shared<std::string>(std::move(pState));
    dirtyFlag_[9] = true;
}
void Employee::setStateToNull() noexcept
{
    state_.reset();
    dirtyFlag_[9] = true;
}

const std::string &Employee::getValueOfCountry() const noexcept
{
    const static std::string defaultValue = std::string();
    if(country_)
        return *country_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Employee::getCountry() const noexcept
{
    return country_;
}
void Employee::setCountry(const std::string &pCountry) noexcept
{
    country_ = std::make_shared<std::string>(pCountry);
    dirtyFlag_[10] = true;
}
void Employee::setCountry(std::string &&pCountry) noexcept
{
    country_ = std::make_shared<std::string>(std::move(pCountry));
    dirtyFlag_[10] = true;
}
void Employee::setCountryToNull() noexcept
{
    country_.reset();
    dirtyFlag_[10] = true;
}

const std::string &Employee::getValueOfPostalcode() const noexcept
{
    const static std::string defaultValue = std::string();
    if(postalcode_)
        return *postalcode_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Employee::getPostalcode() const noexcept
{
    return postalcode_;
}
void Employee::setPostalcode(const std::string &pPostalcode) noexcept
{
    postalcode_ = std::make_shared<std::string>(pPostalcode);
    dirtyFlag_[11] = true;
}
void Employee::setPostalcode(std::string &&pPostalcode) noexcept
{
    postalcode_ = std::make_shared<std::string>(std::move(pPostalcode));
    dirtyFlag_[11] = true;
}
void Employee::setPostalcodeToNull() noexcept
{
    postalcode_.reset();
    dirtyFlag_[11] = true;
}

const std::string &Employee::getValueOfPhone() const noexcept
{
    const static std::string defaultValue = std::string();
    if(phone_)
        return *phone_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Employee::getPhone() const noexcept
{
    return phone_;
}
void Employee::setPhone(const std::string &pPhone) noexcept
{
    phone_ = std::make_shared<std::string>(pPhone);
    dirtyFlag_[12] = true;
}
void Employee::setPhone(std::string &&pPhone) noexcept
{
    phone_ = std::make_shared<std::string>(std::move(pPhone));
    dirtyFlag_[12] = true;
}
void Employee::setPhoneToNull() noexcept
{
    phone_.reset();
    dirtyFlag_[12] = true;
}

const std::string &Employee::getValueOfFax() const noexcept
{
    const static std::string defaultValue = std::string();
    if(fax_)
        return *fax_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Employee::getFax() const noexcept
{
    return fax_;
}
void Employee::setFax(const std::string &pFax) noexcept
{
    fax_ = std::make_shared<std::string>(pFax);
    dirtyFlag_[13] = true;
}
void Employee::setFax(std::string &&pFax) noexcept
{
    fax_ = std::make_shared<std::string>(std::move(pFax));
    dirtyFlag_[13] = true;
}
void Employee::setFaxToNull() noexcept
{
    fax_.reset();
    dirtyFlag_[13] = true;
}

const std::string &Employee::getValueOfEmail() const noexcept
{
    const static std::string defaultValue = std::string();
    if(email_)
        return *email_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Employee::getEmail() const noexcept
{
    return email_;
}
void Employee::setEmail(const std::string &pEmail) noexcept
{
    email_ = std::make_shared<std::string>(pEmail);
    dirtyFlag_[14] = true;
}
void Employee::setEmail(std::string &&pEmail) noexcept
{
    email_ = std::make_shared<std::string>(std::move(pEmail));
    dirtyFlag_[14] = true;
}
void Employee::setEmailToNull() noexcept
{
    email_.reset();
    dirtyFlag_[14] = true;
}

void Employee::updateId(const uint64_t id)
{
    employeeid_ = std::make_shared<uint64_t>(id);
}

const std::vector<std::string> &Employee::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "LastName",
        "FirstName",
        "Title",
        "ReportsTo",
        "BirthDate",
        "HireDate",
        "Address",
        "City",
        "State",
        "Country",
        "PostalCode",
        "Phone",
        "Fax",
        "Email"
    };
    return inCols;
}

void Employee::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getLastname())
        {
            binder << getValueOfLastname();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getFirstname())
        {
            binder << getValueOfFirstname();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getTitle())
        {
            binder << getValueOfTitle();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getReportsto())
        {
            binder << getValueOfReportsto();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getBirthdate())
        {
            binder << getValueOfBirthdate();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getHiredate())
        {
            binder << getValueOfHiredate();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getAddress())
        {
            binder << getValueOfAddress();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getCity())
        {
            binder << getValueOfCity();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getState())
        {
            binder << getValueOfState();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getCountry())
        {
            binder << getValueOfCountry();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getPostalcode())
        {
            binder << getValueOfPostalcode();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[12])
    {
        if(getPhone())
        {
            binder << getValueOfPhone();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[13])
    {
        if(getFax())
        {
            binder << getValueOfFax();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[14])
    {
        if(getEmail())
        {
            binder << getValueOfEmail();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Employee::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    if(dirtyFlag_[7])
    {
        ret.push_back(getColumnName(7));
    }
    if(dirtyFlag_[8])
    {
        ret.push_back(getColumnName(8));
    }
    if(dirtyFlag_[9])
    {
        ret.push_back(getColumnName(9));
    }
    if(dirtyFlag_[10])
    {
        ret.push_back(getColumnName(10));
    }
    if(dirtyFlag_[11])
    {
        ret.push_back(getColumnName(11));
    }
    if(dirtyFlag_[12])
    {
        ret.push_back(getColumnName(12));
    }
    if(dirtyFlag_[13])
    {
        ret.push_back(getColumnName(13));
    }
    if(dirtyFlag_[14])
    {
        ret.push_back(getColumnName(14));
    }
    return ret;
}

void Employee::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getLastname())
        {
            binder << getValueOfLastname();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getFirstname())
        {
            binder << getValueOfFirstname();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getTitle())
        {
            binder << getValueOfTitle();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getReportsto())
        {
            binder << getValueOfReportsto();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getBirthdate())
        {
            binder << getValueOfBirthdate();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getHiredate())
        {
            binder << getValueOfHiredate();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getAddress())
        {
            binder << getValueOfAddress();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getCity())
        {
            binder << getValueOfCity();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getState())
        {
            binder << getValueOfState();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getCountry())
        {
            binder << getValueOfCountry();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getPostalcode())
        {
            binder << getValueOfPostalcode();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[12])
    {
        if(getPhone())
        {
            binder << getValueOfPhone();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[13])
    {
        if(getFax())
        {
            binder << getValueOfFax();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[14])
    {
        if(getEmail())
        {
            binder << getValueOfEmail();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Employee::toJson() const
{
    Json::Value ret;
    if(getEmployeeid())
    {
        ret["EmployeeId"]=(Json::UInt64)getValueOfEmployeeid();
    }
    else
    {
        ret["EmployeeId"]=Json::Value();
    }
    if(getLastname())
    {
        ret["LastName"]=getValueOfLastname();
    }
    else
    {
        ret["LastName"]=Json::Value();
    }
    if(getFirstname())
    {
        ret["FirstName"]=getValueOfFirstname();
    }
    else
    {
        ret["FirstName"]=Json::Value();
    }
    if(getTitle())
    {
        ret["Title"]=getValueOfTitle();
    }
    else
    {
        ret["Title"]=Json::Value();
    }
    if(getReportsto())
    {
        ret["ReportsTo"]=(Json::UInt64)getValueOfReportsto();
    }
    else
    {
        ret["ReportsTo"]=Json::Value();
    }
    if(getBirthdate())
    {
        ret["BirthDate"]=getBirthdate()->toDbStringLocal();
    }
    else
    {
        ret["BirthDate"]=Json::Value();
    }
    if(getHiredate())
    {
        ret["HireDate"]=getHiredate()->toDbStringLocal();
    }
    else
    {
        ret["HireDate"]=Json::Value();
    }
    if(getAddress())
    {
        ret["Address"]=getValueOfAddress();
    }
    else
    {
        ret["Address"]=Json::Value();
    }
    if(getCity())
    {
        ret["City"]=getValueOfCity();
    }
    else
    {
        ret["City"]=Json::Value();
    }
    if(getState())
    {
        ret["State"]=getValueOfState();
    }
    else
    {
        ret["State"]=Json::Value();
    }
    if(getCountry())
    {
        ret["Country"]=getValueOfCountry();
    }
    else
    {
        ret["Country"]=Json::Value();
    }
    if(getPostalcode())
    {
        ret["PostalCode"]=getValueOfPostalcode();
    }
    else
    {
        ret["PostalCode"]=Json::Value();
    }
    if(getPhone())
    {
        ret["Phone"]=getValueOfPhone();
    }
    else
    {
        ret["Phone"]=Json::Value();
    }
    if(getFax())
    {
        ret["Fax"]=getValueOfFax();
    }
    else
    {
        ret["Fax"]=Json::Value();
    }
    if(getEmail())
    {
        ret["Email"]=getValueOfEmail();
    }
    else
    {
        ret["Email"]=Json::Value();
    }
    return ret;
}

Json::Value Employee::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 15)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getEmployeeid())
            {
                ret[pMasqueradingVector[0]]=(Json::UInt64)getValueOfEmployeeid();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getLastname())
            {
                ret[pMasqueradingVector[1]]=getValueOfLastname();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getFirstname())
            {
                ret[pMasqueradingVector[2]]=getValueOfFirstname();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getTitle())
            {
                ret[pMasqueradingVector[3]]=getValueOfTitle();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getReportsto())
            {
                ret[pMasqueradingVector[4]]=(Json::UInt64)getValueOfReportsto();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getBirthdate())
            {
                ret[pMasqueradingVector[5]]=getBirthdate()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getHiredate())
            {
                ret[pMasqueradingVector[6]]=getHiredate()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getAddress())
            {
                ret[pMasqueradingVector[7]]=getValueOfAddress();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[8].empty())
        {
            if(getCity())
            {
                ret[pMasqueradingVector[8]]=getValueOfCity();
            }
            else
            {
                ret[pMasqueradingVector[8]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[9].empty())
        {
            if(getState())
            {
                ret[pMasqueradingVector[9]]=getValueOfState();
            }
            else
            {
                ret[pMasqueradingVector[9]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[10].empty())
        {
            if(getCountry())
            {
                ret[pMasqueradingVector[10]]=getValueOfCountry();
            }
            else
            {
                ret[pMasqueradingVector[10]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[11].empty())
        {
            if(getPostalcode())
            {
                ret[pMasqueradingVector[11]]=getValueOfPostalcode();
            }
            else
            {
                ret[pMasqueradingVector[11]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[12].empty())
        {
            if(getPhone())
            {
                ret[pMasqueradingVector[12]]=getValueOfPhone();
            }
            else
            {
                ret[pMasqueradingVector[12]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[13].empty())
        {
            if(getFax())
            {
                ret[pMasqueradingVector[13]]=getValueOfFax();
            }
            else
            {
                ret[pMasqueradingVector[13]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[14].empty())
        {
            if(getEmail())
            {
                ret[pMasqueradingVector[14]]=getValueOfEmail();
            }
            else
            {
                ret[pMasqueradingVector[14]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getEmployeeid())
    {
        ret["EmployeeId"]=(Json::UInt64)getValueOfEmployeeid();
    }
    else
    {
        ret["EmployeeId"]=Json::Value();
    }
    if(getLastname())
    {
        ret["LastName"]=getValueOfLastname();
    }
    else
    {
        ret["LastName"]=Json::Value();
    }
    if(getFirstname())
    {
        ret["FirstName"]=getValueOfFirstname();
    }
    else
    {
        ret["FirstName"]=Json::Value();
    }
    if(getTitle())
    {
        ret["Title"]=getValueOfTitle();
    }
    else
    {
        ret["Title"]=Json::Value();
    }
    if(getReportsto())
    {
        ret["ReportsTo"]=(Json::UInt64)getValueOfReportsto();
    }
    else
    {
        ret["ReportsTo"]=Json::Value();
    }
    if(getBirthdate())
    {
        ret["BirthDate"]=getBirthdate()->toDbStringLocal();
    }
    else
    {
        ret["BirthDate"]=Json::Value();
    }
    if(getHiredate())
    {
        ret["HireDate"]=getHiredate()->toDbStringLocal();
    }
    else
    {
        ret["HireDate"]=Json::Value();
    }
    if(getAddress())
    {
        ret["Address"]=getValueOfAddress();
    }
    else
    {
        ret["Address"]=Json::Value();
    }
    if(getCity())
    {
        ret["City"]=getValueOfCity();
    }
    else
    {
        ret["City"]=Json::Value();
    }
    if(getState())
    {
        ret["State"]=getValueOfState();
    }
    else
    {
        ret["State"]=Json::Value();
    }
    if(getCountry())
    {
        ret["Country"]=getValueOfCountry();
    }
    else
    {
        ret["Country"]=Json::Value();
    }
    if(getPostalcode())
    {
        ret["PostalCode"]=getValueOfPostalcode();
    }
    else
    {
        ret["PostalCode"]=Json::Value();
    }
    if(getPhone())
    {
        ret["Phone"]=getValueOfPhone();
    }
    else
    {
        ret["Phone"]=Json::Value();
    }
    if(getFax())
    {
        ret["Fax"]=getValueOfFax();
    }
    else
    {
        ret["Fax"]=Json::Value();
    }
    if(getEmail())
    {
        ret["Email"]=getValueOfEmail();
    }
    else
    {
        ret["Email"]=Json::Value();
    }
    return ret;
}

bool Employee::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("EmployeeId"))
    {
        if(!validJsonOfField(0, "EmployeeId", pJson["EmployeeId"], err, true))
            return false;
    }
    if(pJson.isMember("LastName"))
    {
        if(!validJsonOfField(1, "LastName", pJson["LastName"], err, true))
            return false;
    }
    else
    {
        err="The LastName column cannot be null";
        return false;
    }
    if(pJson.isMember("FirstName"))
    {
        if(!validJsonOfField(2, "FirstName", pJson["FirstName"], err, true))
            return false;
    }
    else
    {
        err="The FirstName column cannot be null";
        return false;
    }
    if(pJson.isMember("Title"))
    {
        if(!validJsonOfField(3, "Title", pJson["Title"], err, true))
            return false;
    }
    if(pJson.isMember("ReportsTo"))
    {
        if(!validJsonOfField(4, "ReportsTo", pJson["ReportsTo"], err, true))
            return false;
    }
    if(pJson.isMember("BirthDate"))
    {
        if(!validJsonOfField(5, "BirthDate", pJson["BirthDate"], err, true))
            return false;
    }
    if(pJson.isMember("HireDate"))
    {
        if(!validJsonOfField(6, "HireDate", pJson["HireDate"], err, true))
            return false;
    }
    if(pJson.isMember("Address"))
    {
        if(!validJsonOfField(7, "Address", pJson["Address"], err, true))
            return false;
    }
    if(pJson.isMember("City"))
    {
        if(!validJsonOfField(8, "City", pJson["City"], err, true))
            return false;
    }
    if(pJson.isMember("State"))
    {
        if(!validJsonOfField(9, "State", pJson["State"], err, true))
            return false;
    }
    if(pJson.isMember("Country"))
    {
        if(!validJsonOfField(10, "Country", pJson["Country"], err, true))
            return false;
    }
    if(pJson.isMember("PostalCode"))
    {
        if(!validJsonOfField(11, "PostalCode", pJson["PostalCode"], err, true))
            return false;
    }
    if(pJson.isMember("Phone"))
    {
        if(!validJsonOfField(12, "Phone", pJson["Phone"], err, true))
            return false;
    }
    if(pJson.isMember("Fax"))
    {
        if(!validJsonOfField(13, "Fax", pJson["Fax"], err, true))
            return false;
    }
    if(pJson.isMember("Email"))
    {
        if(!validJsonOfField(14, "Email", pJson["Email"], err, true))
            return false;
    }
    return true;
}
bool Employee::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                  const std::vector<std::string> &pMasqueradingVector,
                                                  std::string &err)
{
    if(pMasqueradingVector.size() != 15)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[2] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[6].empty())
      {
          if(pJson.isMember(pMasqueradingVector[6]))
          {
              if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[7].empty())
      {
          if(pJson.isMember(pMasqueradingVector[7]))
          {
              if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[8].empty())
      {
          if(pJson.isMember(pMasqueradingVector[8]))
          {
              if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[9].empty())
      {
          if(pJson.isMember(pMasqueradingVector[9]))
          {
              if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[10].empty())
      {
          if(pJson.isMember(pMasqueradingVector[10]))
          {
              if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[11].empty())
      {
          if(pJson.isMember(pMasqueradingVector[11]))
          {
              if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[12].empty())
      {
          if(pJson.isMember(pMasqueradingVector[12]))
          {
              if(!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[13].empty())
      {
          if(pJson.isMember(pMasqueradingVector[13]))
          {
              if(!validJsonOfField(13, pMasqueradingVector[13], pJson[pMasqueradingVector[13]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[14].empty())
      {
          if(pJson.isMember(pMasqueradingVector[14]))
          {
              if(!validJsonOfField(14, pMasqueradingVector[14], pJson[pMasqueradingVector[14]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Employee::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("EmployeeId"))
    {
        if(!validJsonOfField(0, "EmployeeId", pJson["EmployeeId"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("LastName"))
    {
        if(!validJsonOfField(1, "LastName", pJson["LastName"], err, false))
            return false;
    }
    if(pJson.isMember("FirstName"))
    {
        if(!validJsonOfField(2, "FirstName", pJson["FirstName"], err, false))
            return false;
    }
    if(pJson.isMember("Title"))
    {
        if(!validJsonOfField(3, "Title", pJson["Title"], err, false))
            return false;
    }
    if(pJson.isMember("ReportsTo"))
    {
        if(!validJsonOfField(4, "ReportsTo", pJson["ReportsTo"], err, false))
            return false;
    }
    if(pJson.isMember("BirthDate"))
    {
        if(!validJsonOfField(5, "BirthDate", pJson["BirthDate"], err, false))
            return false;
    }
    if(pJson.isMember("HireDate"))
    {
        if(!validJsonOfField(6, "HireDate", pJson["HireDate"], err, false))
            return false;
    }
    if(pJson.isMember("Address"))
    {
        if(!validJsonOfField(7, "Address", pJson["Address"], err, false))
            return false;
    }
    if(pJson.isMember("City"))
    {
        if(!validJsonOfField(8, "City", pJson["City"], err, false))
            return false;
    }
    if(pJson.isMember("State"))
    {
        if(!validJsonOfField(9, "State", pJson["State"], err, false))
            return false;
    }
    if(pJson.isMember("Country"))
    {
        if(!validJsonOfField(10, "Country", pJson["Country"], err, false))
            return false;
    }
    if(pJson.isMember("PostalCode"))
    {
        if(!validJsonOfField(11, "PostalCode", pJson["PostalCode"], err, false))
            return false;
    }
    if(pJson.isMember("Phone"))
    {
        if(!validJsonOfField(12, "Phone", pJson["Phone"], err, false))
            return false;
    }
    if(pJson.isMember("Fax"))
    {
        if(!validJsonOfField(13, "Fax", pJson["Fax"], err, false))
            return false;
    }
    if(pJson.isMember("Email"))
    {
        if(!validJsonOfField(14, "Email", pJson["Email"], err, false))
            return false;
    }
    return true;
}
bool Employee::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                const std::vector<std::string> &pMasqueradingVector,
                                                std::string &err)
{
    if(pMasqueradingVector.size() != 15)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
      if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
      {
          if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
              return false;
      }
      if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
      {
          if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
              return false;
      }
      if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
      {
          if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, false))
              return false;
      }
      if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
      {
          if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, false))
              return false;
      }
      if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
      {
          if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, false))
              return false;
      }
      if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
      {
          if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, false))
              return false;
      }
      if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
      {
          if(!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, false))
              return false;
      }
      if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
      {
          if(!validJsonOfField(13, pMasqueradingVector[13], pJson[pMasqueradingVector[13]], err, false))
              return false;
      }
      if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
      {
          if(!validJsonOfField(14, pMasqueradingVector[14], pJson[pMasqueradingVector[14]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Employee::validJsonOfField(size_t index,
                                const std::string &fieldName,
                                const Json::Value &pJson,
                                std::string &err,
                                bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 4:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 5:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 6:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 7:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 8:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 9:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 10:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 11:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 12:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 13:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 14:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
